//
//  ViewController.swift
//  Consolidation4_Hangman_game
//
//  Created by mac on 24.04.2025.
//

import UIKit

class ViewController: UIViewController {
    
    private var nameGameLabel: UILabel!     // –Ω–∞–∑–≤–∞ –≥—Ä–∏
    private var scoreLabel: UILabel!        // —Ä–∞—Ö—É–Ω–æ–∫
    private var wrongAnswersCount: Int = 0
    private var hintLabel: UILabel!         // –ø—ñ–¥–∫–∞–∑–∫–∞
    private var guessWordLabel: UILabel!    // —Å–ª–æ–≤–æ _ _ _ _
    private var wrongLabel: UILabel!        // –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∞ –±—É–∫–≤–∞
    var humanImage: UIImageView!            // –º–∞–ª—é–Ω–æ–∫ —á–æ–ª–æ–≤—ñ—á–∫–∞
    
    // –¶–µ –ø–æ—Ä–æ–∂–Ω—ñ–π UIView, –≤ —è–∫–∏–π –º–∏ –∑–∞—Å—É–Ω–µ–º–æ –≤—Å—ñ –∫–Ω–æ–ø–∫–∏
    var buttonsContainer = UIView()
    var letterButtons = [UIButton]()        // –ú–∞—Å–∏–≤ –∫–Ω–æ–ø–æ–∫ - –±—É–∫–≤
    
    var nextLevelButton: UIButton!
    var menuButton: UIButton!
    
    var usedLetters = Set<String> ()         // –ú–∞—Å–∏–≤ –∫–Ω–æ–ø–æ–∫, —è–∫—ñ –≤–∂–µ –±—É–ª–∏ –Ω–∞—Ç–∏—Å–Ω—É—Ç—ñ
    var wrongLetters = Set<String> ()
    
    var wordToGuess = "FORD"
    var wordsLevel = ["AUDI", "CITROEN", "HONDA", "TOYOTA", "MAZDA", "FERARRI"]
    
    var score: Int = 0 {
        didSet {
            scoreLabel.text = "Score \(score)"
        }
    }
    

    override func viewDidLoad() {
        super.viewDidLoad()
        
        view.backgroundColor = .systemBackground
        
        // –ù–∞–ª–∞—à—Ç–æ–≤—É—î–º–æ –ª–µ–π–±–ª–∏
        nameGameLabel = createLabel(text: "HANGMAN", fontSize: 30)
        
        scoreLabel = createLabel(text: "Score 0", fontSize: 20)
        scoreLabel.font = UIFont.systemFont(ofSize: 20, weight: .semibold)
        
        hintLabel = createLabel(text: "Hint: Car Brand ", fontSize: 20)
        hintLabel.font = UIFont.italicSystemFont(ofSize: 20)
        hintLabel.textColor = .purple
        
        guessWordLabel = createLabel(text: "_ _ _ _", fontSize: 25)
        guessWordLabel.font = UIFont.monospacedDigitSystemFont(ofSize: 32, weight: .medium)
        guessWordLabel.textAlignment = .center
        
        wrongLabel = createLabel(text: "Wrong: \(wrongLetters.joined(separator: ", "))", fontSize: 20)
        
        // –°—Ç–≤–æ—Ä—é—î–º –∫–Ω–æ–ø–∫—É - next level
        nextLevelButton = UIButton(type: .system)
        nextLevelButton.translatesAutoresizingMaskIntoConstraints = false
        nextLevelButton.setTitle("New Game", for: .normal)
        nextLevelButton.titleLabel?.font = UIFont.systemFont(ofSize: 20)
        nextLevelButton.backgroundColor = .systemMint
        nextLevelButton.setTitleColor(.purple, for: .normal)
        nextLevelButton.layer.cornerRadius = 10
        nextLevelButton.addTarget(self, action: #selector(startNewGame), for: .touchUpInside)
        
        // –°—Ç–≤–æ—Ä—é—î–º –∫–Ω–æ–ø–∫—É - menu
        menuButton = UIButton(type: .system)
        menuButton.translatesAutoresizingMaskIntoConstraints = false
        menuButton.setTitle("MENU", for: .normal)
        menuButton.titleLabel?.font = UIFont.systemFont(ofSize: 20)
        menuButton.backgroundColor = .systemMint
        menuButton.setTitleColor(.purple, for: .normal)
        menuButton.layer.cornerRadius = 10
        menuButton.addTarget(self, action: #selector(openMenu), for: .touchUpInside)
        
        
        // –î–æ–¥–∞—î–º–æ –Ω–∞ –µ–∫—Ä–∞–Ω
        view.addSubview(nameGameLabel)
        view.addSubview(scoreLabel)
        view.addSubview(hintLabel)
        view.addSubview(guessWordLabel)
        view.addSubview(wrongLabel)
        view.addSubview(nextLevelButton)
        view.addSubview(menuButton)
        
        // –î–æ–¥–∞—î–º–æ –∫–∞—Ä—Ç–∏–Ω–∫—É
        humanImage = UIImageView(image: UIImage(named: "hangman" ))
        humanImage.contentMode = .scaleAspectFit
        humanImage.translatesAutoresizingMaskIntoConstraints = false
        view.addSubview(humanImage)
        
        // –ù–∞–ª–∞—à—Ç–æ–≤—É—î–º –æ–±–º–µ–∂–µ–Ω–Ω—è –¥–ª—è –º—ñ—Ç–æ–∫
        NSLayoutConstraint.activate([
            
            nameGameLabel.topAnchor.constraint(equalTo: view.safeAreaLayoutGuide.topAnchor, constant: 20),
            nameGameLabel.centerXAnchor.constraint(equalTo: view.centerXAnchor),
            
            scoreLabel.topAnchor.constraint(equalTo: nameGameLabel.bottomAnchor, constant: 20),
            scoreLabel.trailingAnchor.constraint(equalTo: view.layoutMarginsGuide.trailingAnchor, constant: -20),
            
            nextLevelButton.bottomAnchor.constraint(equalTo: view.safeAreaLayoutGuide.bottomAnchor, constant: -20),
            nextLevelButton.leadingAnchor.constraint(equalTo: view.layoutMarginsGuide.leadingAnchor, constant: 20),
            nextLevelButton.widthAnchor.constraint(equalToConstant: 150),
            
            menuButton.bottomAnchor.constraint(equalTo: view.safeAreaLayoutGuide.bottomAnchor, constant: -20),
            menuButton.trailingAnchor.constraint(equalTo: view.layoutMarginsGuide.trailingAnchor, constant: -20),
            menuButton.widthAnchor.constraint(equalToConstant: 150),
            
            
            // –ù–∞–ª–∞—à—Ç–æ–≤—É—î–º–æ –∫–∞—Ä—Ç–∏–Ω–∫—É (—Ü–µ –±—É–¥–µ —Ä–æ–∑—Ç–∞—à—É–≤–∞–Ω–Ω—è –∫–∞—Ä—Ç–∏–Ω–∫–∏ –Ω–∞ –µ–∫—Ä–∞–Ω—ñ)
            humanImage.topAnchor.constraint(equalTo: scoreLabel.bottomAnchor, constant: 50),
            humanImage.centerXAnchor.constraint(equalTo: view.centerXAnchor),
            humanImage.widthAnchor.constraint(equalTo: view.widthAnchor, multiplier: 0.5),
            humanImage.heightAnchor.constraint(equalTo: humanImage.widthAnchor),
      
            
            hintLabel.topAnchor.constraint(equalTo: humanImage.bottomAnchor, constant: 20),
            hintLabel.centerXAnchor.constraint(equalTo: view.centerXAnchor),
            
            wrongLabel.topAnchor.constraint(equalTo: hintLabel.bottomAnchor, constant: 20),
            wrongLabel.centerXAnchor.constraint(equalTo: view.centerXAnchor),
            
            guessWordLabel.topAnchor.constraint(equalTo: wrongLabel.bottomAnchor, constant: 20),
            guessWordLabel.centerXAnchor.constraint(equalTo: view.centerXAnchor)
        ])
        
        createLetterButtons()      // –°—Ç–≤–æ—Ä—é—î–º–æ –∫–Ω–æ–ø–∫–∏
        createLetterButtonRows()   // –†–æ–∑—Ç–∞—à–æ–≤—É—î–º–æ –∫–Ω–æ–ø–∫–∏
        
    }
    
    
    // –ú–µ—Ç–æ–¥ —â–æ –Ω–∞–ª–∞—à—Ç–æ–≤—É—î –∫–Ω–æ–ø–∫—É
    func createLabel(text: String, fontSize: CGFloat) -> UILabel {
        let label = UILabel()
        label.text = text
        label.font = UIFont.systemFont(ofSize: fontSize)
        label.translatesAutoresizingMaskIntoConstraints = false
        return label
    }
    
    
    // –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–Ω–æ–ø–æ–∫ –∑ –±—É–∫–≤–∞–º–∏
    func createLetterButtons() {
        let letters = "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
        
        for letter in letters {
            let button = UIButton(type: .system)
            button.setTitle(String(letter), for: .normal)
            button.addTarget(self, action: #selector(letterButtonTapped), for: .touchUpInside)
            button.translatesAutoresizingMaskIntoConstraints = false
            letterButtons.append(button)
            
            // üîπ –°—Ç–∏–ª—å
            button.titleLabel?.font = UIFont.systemFont(ofSize: 20)
            button.backgroundColor = UIColor.systemGray5
            button.layer.cornerRadius = 8
        }
    }
    
    
    func createLetterButtonRows() {
    
        buttonsContainer.translatesAutoresizingMaskIntoConstraints = false
        view.addSubview(buttonsContainer)
        
        // –ú–∏ –∑–∞–¥–∞—î–º–æ —Ä–∞–º–∫–∏ –¥–ª—è –≤—Å—ñ—î—ó –∑–æ–Ω–∏, –¥–µ –±—É–¥—É—Ç—å –∫–Ω–æ–ø–∫–∏.
        NSLayoutConstraint.activate([
            buttonsContainer.topAnchor.constraint(equalTo: guessWordLabel.bottomAnchor, constant: 50),
            buttonsContainer.leadingAnchor.constraint(equalTo: view.safeAreaLayoutGuide.leadingAnchor, constant: 20),
            buttonsContainer.trailingAnchor.constraint(equalTo: view.safeAreaLayoutGuide.trailingAnchor, constant: -20),
            buttonsContainer.bottomAnchor.constraint(lessThanOrEqualTo: view.safeAreaLayoutGuide.bottomAnchor, constant: -20)
        ])
        
        
        let rowCount = 3
        let columnCount = 9
        
        // –ì–æ–ª–æ–≤–Ω–∏–π —Å—Ç–µ–∫, —â–æ –º—ñ—Å—Ç–∏—Ç—å –≤—Å—ñ —Ä—è–¥–∫–∏
        let mainStack = UIStackView()
        mainStack.axis = .vertical                  // –†–æ–∑—Ç–∞—à–æ–≤—É–π –µ–ª–µ–º–µ–Ω—Ç–∏ –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–æ (–∑–≤–µ—Ä—Ö—É –≤–Ω–∏–∑).
        mainStack.distribution = .fillEqually       // –í—Å—ñ –µ–ª–µ–º–µ–Ω—Ç–∏ –≤—Å–µ—Ä–µ–¥–∏–Ω—ñ (rowStack) –∑–∞–π–º–∞—é—Ç—å –æ–¥–Ω–∞–∫–æ–≤—É –≤–∏—Å–æ—Ç—É.
        mainStack.spacing = 10                      // –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ –≤—ñ–¥—Å—Ç—É–ø –º—ñ–∂ —Ä—è–¥–∫–∞–º–∏ –∫–Ω–æ–ø–æ–∫ (10 –ø—ñ–∫—Å–µ–ª—ñ–≤).
        mainStack.translatesAutoresizingMaskIntoConstraints = false
        buttonsContainer.addSubview(mainStack)
        
        NSLayoutConstraint.activate([
            mainStack.topAnchor.constraint(equalTo: buttonsContainer.topAnchor),
            mainStack.leadingAnchor.constraint(equalTo: buttonsContainer.leadingAnchor),
            mainStack.trailingAnchor.constraint(equalTo: buttonsContainer.trailingAnchor),
            mainStack.bottomAnchor.constraint(equalTo: buttonsContainer.bottomAnchor)
        ])
        
        for row in 0..<rowCount {
            
            //      —Ñ–æ—Ä–º—É—î–º —ñ–Ω–¥–µ–∫—Å –¥–ª—è –∫–æ–∂–Ω–æ–≥–æ —Ä—è–¥–∫–∞
            //
            //      –î–ª—è row = 0: startIndex = 0 * 9 = 0
            //      –î–ª—è row = 1: startIndex = 1 * 9 = 9
            //      –î–ª—è row = 2: startIndex = 2 * 9 = 18
            
            let startIndex = row  * columnCount
            
            
            //      —Ü–µ –ø–µ—Ä–µ–¥–±–∞—á—É–≤–∞–Ω–∏–π –∫—ñ–Ω–µ—Ü—å –ø–æ—Ç–æ—á–Ω–æ–≥–æ —Ä—è–¥–∫–∞
            //      min(...) –ø–æ—Ç—Ä—ñ–±–µ–Ω, —â–æ–± –Ω–µ –≤–∏–π—Ç–∏ –∑–∞ –º–µ–∂—ñ –º–∞—Å–∏–≤—É!
            //
            //      –î–ª—è row = 0: endIndex = min(1 * 9, 26) = 9
            //      –î–ª—è row = 1: endIndex = min(2 * 9, 26) = 18
            //      –î–ª—è row = 2: endIndex = min(3 * 9, 26) = min(27, 26) = 26
            
            let endIndex = min((row + 1) * columnCount,letterButtons.count)
            
            
            
            //      –¶–µ –≤–∏—Ç—è–≥—É—î –º–∞—Å–∏–≤ –∫–Ω–æ–ø–æ–∫ –¥–ª—è –æ–¥–Ω–æ–≥–æ —Ä—è–¥–∫–∞
            //
            //      –†—è–¥–æ–∫ 0: letterButtons[0..<9] ‚Äî –∫–Ω–æ–ø–∫–∏ A‚ÄìI
            //      –†—è–¥–æ–∫ 1: letterButtons[9..<18] ‚Äî –∫–Ω–æ–ø–∫–∏ J‚ÄìR
            //      –†—è–¥–æ–∫ 2: letterButtons[18..<26] ‚Äî –∫–Ω–æ–ø–∫–∏ S‚ÄìZ
            
            let rowButtons = Array(letterButtons[startIndex..<endIndex])
            
            // –°—Ç–≤–æ—Ä—é—î–º–æ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–∏–π —Å—Ç–µ–∫ –¥–ª—è –∫–æ–∂–Ω–æ–≥–æ —Ä—è–¥–∫–∞ –∫–Ω–æ–ø–æ–∫.
            // –ü–µ—Ä–µ–¥–∞—î–º–æ –≤ –Ω—å–æ–≥–æ –º–∞—Å–∏–≤ –∫–Ω–æ–ø–æ–∫ –¥–ª—è –ø–æ—Ç–æ—á–Ω–æ–≥–æ —Ä—è–¥–∫–∞ (rowButtons)
            let rowStack = UIStackView(arrangedSubviews: rowButtons)
            rowStack.axis = .horizontal                 // –†–æ–∑—Ç–∞—à–æ–≤—É–π –µ–ª–µ–º–µ–Ω—Ç–∏ –ø–æ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—ñ (–∑–ª—ñ–≤–∞ –Ω–∞–ø—Ä–∞–≤–æ)
            rowStack.distribution = .fillEqually        // –í—Å—ñ –∫–Ω–æ–ø–∫–∏ –≤ —Ä—è–¥–∫—É –º–∞—é—Ç—å –æ–¥–Ω–∞–∫–æ–≤—É —à–∏—Ä–∏–Ω—É
            rowStack.spacing = 8
            
            mainStack.addArrangedSubview(rowStack)      // –î–æ–¥–∞—î–º–æ —Ü–µ–π —Ä—è–¥–æ–∫ –∫–Ω–æ–ø–æ–∫ –≤ –≥–æ–ª–æ–≤–Ω–∏–π –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–∏–π —Å—Ç–µ–∫ (mainStack)
        }
    }
    
    
    @objc func letterButtonTapped(_ sender: UIButton) {
        
        // "Sender ‚Äî —Ü–µ –Ω–∞—Ç–∏—Å–Ω—É—Ç–∞ –∫–Ω–æ–ø–∫–∞. Guard ‚Äî –±–µ–∑–ø–µ—á–Ω–æ –¥—ñ—Å—Ç–∞—î–º–æ —Ç–µ–∫—Å—Ç –∑ –Ω–µ—ó."
        guard let letter = sender.titleLabel?.text else { return }
        
        usedLetters.insert(letter)
        
        // –í–∏–º–∏–∫–∞—î–º–æ –∫–Ω–æ–ø–∫—É, —â–æ–± –Ω–µ –º–æ–∂–Ω–∞ –±—É–ª–æ –Ω–∞—Ç–∏—Å–∫–∞—Ç–∏ –≤–¥—Ä—É–≥–µ
        sender.isEnabled = false
        
        if wordToGuess.contains(letter) {
            // —è–∫—â–æ –≤–≥–∞–¥–∞–≤ –ª—ñ—Ç–µ—Ä—É ‚Äî –æ–Ω–æ–≤–ª—é—î–º–æ —Å–ª–æ–≤–æ
            updatePromptWord()
            score += 1
            
        } else {
            // —è–∫—â–æ –ù–ï –≤–≥–∞–¥–∞–≤ ‚Äî –¥–æ–¥–∞—î–º–æ —É –º–∞—Å–∏–≤ –ø–æ–º–∏–ª–æ–∫
            wrongLetters.insert(letter)
            
            // –æ–Ω–æ–≤–ª—é—î–º–æ –Ω–∞–ø–∏—Å "Wrong: ..."
            wrongLabel.text = "Wrong: \(wrongLetters.sorted().joined(separator: ", "))"
            
            
            // –∑–∞ –±–∞–∂–∞–Ω–Ω—è–º: –∑–±—ñ–ª—å—à—É—î–º–æ –ª—ñ—á–∏–ª—å–Ω–∏–∫ –ø–æ–º–∏–ª–æ–∫
            wrongAnswersCount += 1
            
            // –∑–º–µ–Ω—à—É—î–º —Ä–∞—Ö—É–Ω–æ–∫ –Ω–∞ 1 –æ—á–∫–æ
            score -= 1
            
            // –æ–Ω–æ–≤–ª—é—î–º –∫–∞—Ä—Ç–∏–Ω–∫—É
            updateImage()
            
            if wrongAnswersCount == 6 {
                
                score = 0
                
                let alert = UIAlertController(title: "The hangman got you! üòµ", message: "You made too many mistakes.\nThe correct word was: \(wordToGuess)", preferredStyle: .alert)
                
                alert.addAction(UIAlertAction(title: "Try Again", style: .default, handler: { _ in self.tryAgain()}))
                alert.addAction(UIAlertAction(title: "Exit to Menu", style: .destructive, handler: { _ in self.openMenu() }))
                
                present(alert, animated: true)
            }
        }
        
    }
    
    
    func updatePromptWord() {
        
        // –ó—ñ–±—Ä–∞–Ω–µ –Ω–æ–≤–µ —Å–ª–æ–≤–æ –¥–ª—è –ø–æ–∫–∞–∑—É (–≤—ñ–¥–∫—Ä–∏—Ç—ñ –±—É–∫–≤–∏ + –ø—ñ–¥–∫—Ä–µ—Å–ª–µ–Ω–Ω—è)
        var promptWord = ""
        
        var isWordGuessed = true  // –ù–æ–≤–µ: –ø—Ä–∏–ø—É—Å–∫–∞—î–º–æ, —â–æ –≤—Å–µ –≤–≥–∞–¥–∞–Ω–æ
        
        for character in wordToGuess {
            let strChar = String(character)
            
            if usedLetters.contains(strChar) {
                promptWord += strChar + " "
            } else {
                promptWord += "_ "
                isWordGuessed = false
            }
        }
        
        // –ù–µ –∑–∞–±—É–¥—å —â–µ –æ–Ω–æ–≤–∏—Ç–∏ –ª–µ–π–±–ª, —ñ–Ω–∞–∫—à–µ –Ω—ñ—á–æ–≥–æ –Ω–µ –±—É–¥–µ –≤–∏–¥–Ω–æ:
        guessWordLabel.text = promptWord
        
        // –Ø–∫—â–æ —Å–ª–æ–≤–æ –≤–≥–∞–¥–∞–Ω–µ - —Ç–æ
        if isWordGuessed {
            
            score += 10
            
            let ac = UIAlertController(title: "You win! üéâ", message: "Congratulations!", preferredStyle: .alert)
            ac.addAction(UIAlertAction(title: "Go to next level", style: .default, handler: { _ in self.startNewGame() }))
            ac.addAction(UIAlertAction(title: "Exit to Menu", style: .destructive, handler: { _ in self.openMenu() }))
            
            present(ac,animated: true)
            
        }
    }
    
    
    func updateImage() {
        let imageName = "hangman\(wrongAnswersCount)"
        humanImage.image = UIImage(named: imageName)
    }
    
    
    func tryAgain() {
        usedLetters.removeAll()
        wrongLetters.removeAll()
        wrongAnswersCount = 0
        score = 0
        
        for button in letterButtons {
            button.isEnabled = true
        }
        
        var promptWord = ""
        for _ in wordToGuess {
            promptWord += "_ "
        }
        
        guessWordLabel.text = promptWord
        
        humanImage.image = UIImage(named: "hangman")
        wrongLabel.text = "Wrong: \(wrongLetters.joined(separator: ", "))"
    }
    
    
    @objc func startNewGame() {
        usedLetters.removeAll()
        wrongLetters.removeAll()
        wrongAnswersCount = 0
        
        for button in letterButtons {
            button.isEnabled = true
        }
        
        // –í–∏–±–∏—Ä–∞—î –≤–∏–ø–∞–¥–∫–æ–≤–µ —Å–ª–æ–≤–æ –∑ –º–∞—Å–∏–≤—É
        wordToGuess = wordsLevel.randomElement() ?? "FORD"
        
        var promptWord = ""
        for _ in wordToGuess {
            promptWord += "_ "
        }
        
        guessWordLabel.text = promptWord
        humanImage.image = UIImage(named: "hangman")
        wrongLabel.text = "Wrong: \(wrongLetters.joined(separator: ", "))"
    }
    
    @objc func openMenu() {
        let menuVC = MenuViewController()
        menuVC.modalPresentationStyle = .fullScreen
        present(menuVC, animated: true)
    }
    
}


