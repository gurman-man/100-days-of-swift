//
//  GameScene.swift
//  Project17
//
//  Created by mac on 10.06.2025.
//

import SpriteKit

class GameScene: SKScene, SKPhysicsContactDelegate {
    var starfield: SKEmitterNode!
    var player: SKSpriteNode!
    var scoreLabel: SKLabelNode!
    var healthLabel: SKLabelNode!
    var gameOverLabel: SKLabelNode!
    var restartLabel: SKLabelNode!
    
    var health = 4
    var isGameOver = false
    var isTouching = false
    var countEnemy = 0
    var enemySpeedUpStep = 0.1
    var possibleEnemies = ["ball", "hammer", "tv"]
    
    // –¢–∞–π–º–µ—Ä, —è–∫–∏–π —Ä–µ–≥—É–ª—è—Ä–Ω–æ –≤–∏–∫–ª–∏–∫–∞—î —Ñ—É–Ω–∫—Ü—ñ—é –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –≤–æ—Ä–æ–≥—ñ–≤ (createEnemy)
    var gameTimer: Timer?
    //  –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è –¥–ª—è –∫–æ–Ω—Ç—Ä–æ–ª—é —á–∞—Å—Ç–æ—Ç–∏ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Ä–∞—Ö—É–Ω–∫—É —É
    var lastScoreUpdateTime: TimeInterval = 0
    
    var score = 0 {
        didSet {
            scoreLabel.text = "Score: \(score)"
        }
    }
    
    // MARK: - Lifecycle
    override func didMove(to view: SKView) {
        backgroundColor = .black
        
        starfield = SKEmitterNode(fileNamed: "starfield")!
        starfield.position = CGPoint(x: 1024, y: 384)
        starfield.advanceSimulationTime(10) // –æ–¥—Ä–∞–∑—É –∑‚Äô—è–≤–ª—è—î—Ç—å—Å—è –±–∞–≥–∞—Ç–æ –∑—ñ—Ä–æ–∫
        addChild(starfield)
        starfield.zPosition = -1
        
        player = SKSpriteNode(imageNamed: "player")
        player.position = CGPoint(x: 100, y: 384)
        
        player.physicsBody?.angularVelocity = 0
        player.physicsBody?.angularDamping = 0
        
        //  —Å—Ç–≤–æ—Ä—é—î —Ñ—ñ–∑–∏—á–Ω–µ —Ç—ñ–ª–æ, —Ç–æ–±—Ç–æ –¥–æ–¥–∞—î –π–æ–º—É —Ñ–æ—Ä–º—É –¥–ª—è –≤–∑–∞—î–º–æ–¥—ñ—ó –∑ —ñ–Ω—à–∏–º–∏ –æ–±'—î–∫—Ç–∞–º–∏
        player.physicsBody = SKPhysicsBody(texture: player.texture!, size: player.size)
        
        player.physicsBody?.categoryBitMask = 2  // –¥–ª—è –≥—Ä–∞–≤—Ü—è
        player.physicsBody?.contactTestBitMask = 1 // –≤–æ—Ä–æ–≥–∏ –º–∞—é—Ç—å 1, –¥–∏–≤–∏—Å—å –¥–∞–ª—ñ
        
        addChild(player)
        
        scoreLabel = SKLabelNode(fontNamed: "Chalkduster")
        scoreLabel.position = CGPoint(x: 16, y: 36)
        scoreLabel.horizontalAlignmentMode = .left
        addChild(scoreLabel)
        
        healthLabel = SKLabelNode(fontNamed: "Chalkduster")
        healthLabel.name = "healthLabel"
        healthLabel.position = CGPoint(x: 900, y: 36)
        healthLabel.horizontalAlignmentMode = .right
        healthLabel.zPosition = 1
        addChild(healthLabel)
        
        updateHealthLabel()
        score = 0
        
        physicsWorld.gravity = .zero // –≤—ñ–¥—Å—É—Ç–Ω—ñ—Å—Ç—å –≥—Ä–∞–≤—ñ—Ç–∞—Ü—ñ—ó
        physicsWorld.contactDelegate = self
        
        // –ó–∞–ø—É—Å–∫–∞—î —Ç–∞–π–º–µ—Ä, —è–∫–∏–π –∫–æ–∂–Ω—ñ 1 —Å–µ–∫—É–Ω–¥–∏ —Å—Ç–≤–æ—Ä—é—î –Ω–æ–≤–æ–≥–æ –≤–æ—Ä–æ–≥–∞
        gameTimer = Timer.scheduledTimer(timeInterval: 1, target: self, selector: #selector(createEnemy), userInfo: nil, repeats: true)
    }
    
    
    // MARK: - Enemy
    // –ú–µ—Ç–æ–¥, —è–∫–∏–π —Å—Ç–≤–æ—Ä—é—î –Ω–æ–≤–æ–≥–æ –≤–æ—Ä–æ–≥–∞:
    @objc func createEnemy() {
        guard !isGameOver else { return }
        guard let enemy = possibleEnemies.randomElement() else { return }
        
        let sprite = SKSpriteNode(imageNamed: enemy)
        //  –ó‚Äô—è–≤–ª—è—î—Ç—å—Å—è —Å–ø—Ä–∞–≤–∞, –Ω–∞ –≤–∏–ø–∞–¥–∫–æ–≤—ñ–π –≤–∏—Å–æ—Ç—ñ
        sprite.position = CGPoint(x: 1200, y: Int.random(in: 50...736))
        addChild(sprite)
        
        sprite.physicsBody = SKPhysicsBody(texture: sprite.texture!, size: sprite.size)
        
        sprite.physicsBody?.categoryBitMask = 1 // –≤–æ—Ä–æ–≥–∏
        sprite.physicsBody?.contactTestBitMask = 2 // —â–æ–± –≤–∏—è–≤–∏—Ç–∏ –∑—ñ—Ç–∫–Ω–µ–Ω–Ω—è –∑ –≥—Ä–∞–≤—Ü–µ–º
        
        //  –†—É—Ö–∞—î—Ç—å—Å—è –≤–ª—ñ–≤–æ –∑—ñ —à–≤–∏–¥–∫—ñ—Å—Ç—é -500
        sprite.physicsBody?.velocity = CGVector(dx: -500, dy: 0)
        
        // –¥–æ–¥–∞—î –ø–µ–≤–Ω–µ –æ–±–µ—Ä—Ç–∞–Ω–Ω—è —Å–ø—Ä–∞–π—Ç–∞
        sprite.physicsBody?.angularVelocity = 5
        
        // –ù–µ –≥–∞–ª—å–º—É—î –∑ —á–∞—Å–æ–º ‚Äî –∑–∞–≤–∂–¥–∏ —Ä—É—Ö–∞—î—Ç—å—Å—è –∑ —Ç—ñ—î—é –∂ —à–≤–∏–¥–∫—ñ—Å—Ç—é
        sprite.physicsBody?.linearDamping = 0
        sprite.physicsBody?.angularDamping = 0
        
        countEnemy += 1
        
        if countEnemy % 20 == 0 {
            // –ó—É–ø–∏–Ω—è—î –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ–π —Ç–∞–π–º–µ—Ä
            gameTimer?.invalidate()
            let newInterval = max(0.2, 1 - enemySpeedUpStep)
            gameTimer = Timer.scheduledTimer(timeInterval: newInterval, target: self, selector: #selector(createEnemy), userInfo: nil, repeats: true)
            enemySpeedUpStep += 0.1
        }
    }
    
    
    //  –í–∏–∫–ª–∏–∫–∞—î—Ç—å—Å—è –æ–¥–∏–Ω —Ä–∞–∑ —É –∫–æ–∂–Ω–æ–º—É –∫–∞–¥—Ä—ñ —ñ –¥–æ–∑–≤–æ–ª—è—î –Ω–∞–º –≤–Ω–æ—Å–∏—Ç–∏ –∑–º—ñ–Ω–∏ —É –≥—Ä—É
    override func update(_ currentTime: TimeInterval) {
        for node in children {
            if node.position.x < -300 {
                node.removeFromParent()
            }
            
            if !isGameOver {
                if currentTime - lastScoreUpdateTime > 0.5 {
                    score += 1
                    lastScoreUpdateTime = currentTime
                }
            }
        }
    }
    
    
    // MARK: - Touches
    // –ö–æ–ª–∏ –≥—Ä–∞–≤–µ—Ü—å –¥–æ—Ç–æ—Ä–∫–∞—î—Ç—å—Å—è –µ–∫—Ä–∞–Ω—É, –º–∏ —Å—Ç–∞–≤–∏–º–æ –ø—Ä–∞–ø–æ—Ä–µ—Ü—å
    override func touchesBegan(_ touches: Set<UITouch>, with event: UIEvent?) {
        isTouching = true
        if isGameOver {
            if let touch = touches.first {
                let location = touch.location(in: self)
                let tappedNodes = nodes(at: location)
                
                for node in tappedNodes {
                    if node.name == "restartLabel" {
                        restartGame()
                    }
                }
            }
        } else {
            isTouching = true
        }
    }
    
    // –ì—Ä–∞–≤–µ—Ü—å –≤–µ–¥–µ –ø–∞–ª–µ—Ü—å –ø–æ –µ–∫—Ä–∞–Ω—É (touchesMoved)
    override func touchesMoved(_ touches: Set<UITouch>, with event: UIEvent?) {
        guard let touch = touches.first else { return }
        var location = touch.location(in: self)
        
        if location.y < 100 { location.y = 100 }
        if location.y > 668 { location.y = 668 }
        
        player.position = location
    }
    
    // –ö–æ–ª–∏ –ø–∞–ª–µ—Ü—å –ø—ñ–¥–Ω—è–ª–∏ (touchesEnded) ‚Äî –º–∏ –≥–æ–≤–æ—Ä–∏–º–æ - –Ω–µ —Ä—É—Ö–∞–π –π–æ–≥–æ!
    override func touchesEnded(_ touches: Set<UITouch>, with event: UIEvent?) {
        isTouching = false
    }
    
    
    // MARK: - Physics
    // –ö–æ–ª–∏ —Ä–∞–∫–µ—Ç–∞ —Å—Ç–∏–∫–∞—î—Ç—å—Å—è –∑ –≤–æ—Ä–æ–≥–æ–º:
    func didBegin(_ contact: SKPhysicsContact) {
        if isGameOver { return }
        
        let bodyA = contact.bodyA
        let bodyB = contact.bodyB
        
        // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞, —á–∏ –≥—Ä–∞–≤–µ—Ü—å —Ç–∞ –≤–æ—Ä–æ–≥ –∑—ñ—Ç–∫–Ω—É–ª–∏—Å—è
        if (bodyA.categoryBitMask == 2 && bodyB.categoryBitMask == 1) ||
            (bodyA.categoryBitMask == 1 && bodyB.categoryBitMask == 2) {
            
            // –ó–∞–ø–æ–±—ñ–≥–∞—î–º–æ –ø–æ–≤—Ç–æ—Ä–Ω–∏–º –≤—Ç—Ä–∞—Ç–∞–º HP –ø–æ–∫–∏ –¥—ñ—î –Ω–µ–≤—Ä–∞–∑–ª–∏–≤—ñ—Å—Ç—å
            guard player.alpha == 1 else { return }
            
            // –¢–∏–º—á–∞—Å–æ–≤–∞ "–Ω–µ–≤—Ä–∞–∑–ª–∏–≤—ñ—Å—Ç—å"
            player.alpha = 0.4
            let invincible = SKAction.sequence([
                SKAction.wait(forDuration: 0.8),
                SKAction.fadeAlpha(to: 1, duration: 0.3)
            ])
            player.run(invincible)
            
            health -= 1
            updateHealthLabel()
            
            if health <= 0 {
                let explosion = SKEmitterNode(fileNamed: "explosion")!
                explosion.position = player.position
                addChild(explosion)
                
                player.removeFromParent()
                isGameOver = true
                gameTimer?.invalidate() // ‚¨ÖÔ∏è –ó—É–ø–∏–Ω—è—î–º–æ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –Ω–æ–≤–∏—Ö –≤–æ—Ä–æ–≥—ñ–≤
                
                // –ü–ª–∞–≤–Ω–∞ –ø–æ—è–≤–∞ Game Over
                run(SKAction.sequence([
                    SKAction.wait(forDuration: 0.5),
                    SKAction.run { self.showGameOver() }
                ]))
                
                remove(object: explosion)
            }
        }
    }
    
    
    // MARK: - Helpers
    func updateHealthLabel() {
        if let healthLabel = childNode(withName: "healthLabel") as? SKLabelNode {
            let safeHealth = max(0, health)
            let hearts = safeHealth > 0 ? String(repeating: "‚ù§Ô∏è", count: safeHealth) : "üíÄ"
            healthLabel.text = "HP: \(hearts)"
        }
    }
    
    func remove(object: SKNode) {
        let wait = SKAction.wait(forDuration: 1)
        let remove = SKAction.removeFromParent()
        let sequence = SKAction.sequence([wait, remove])
        
        object.run(sequence)
    }
    
    func restartGame() {
        // –ü—Ä–∏–±–∏—Ä–∞—î–º–æ –≤—Å—ñ –ø–æ—Ç–æ—á–Ω—ñ –µ–ª–µ–º–µ–Ω—Ç–∏
        removeAllChildren()
        removeAllActions()
        
        // –°–∫–∏–¥–∞—î–º–æ —Å—Ç–∞–Ω–∏
        isGameOver = false
        health = 3
        score = 0
        countEnemy = 0
        enemySpeedUpStep = 0.1
        
        // –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞—î–º–æ —Å—Ü–µ–Ω—É –∑ –ø–ª–∞–≤–Ω–∏–º –ø–µ—Ä–µ—Ö–æ–¥–æ–º
        let newScene = GameScene(size: size)
        newScene.scaleMode = .aspectFill
        let transition = SKTransition.fade(withDuration: 1)
        view?.presentScene(newScene, transition: transition)
    }
    
    func showGameOver() {
        // –ó–∞—Ç–µ–º–Ω–µ–Ω–Ω—è —Ñ–æ–Ω—É
        let overlay = SKSpriteNode(color: UIColor.black.withAlphaComponent(0.5), size: self.size)
        overlay.position = CGPoint(x: frame.midX, y: frame.midY)
        overlay.zPosition = 9
        overlay.alpha = 0
        addChild(overlay)
        
        overlay.run(SKAction.fadeIn(withDuration: 1.0))
        
        // –°—Ç–≤–æ—Ä—é—î–º–æ –Ω–∞–¥–ø–∏—Å
        gameOverLabel = SKLabelNode(fontNamed: "Chalkduster")
        gameOverLabel.text = "GAME OVER"
        gameOverLabel.fontSize = 60
        gameOverLabel.position = CGPoint(x: frame.midX, y: frame.midY + 50)
        gameOverLabel.zPosition = 10
        gameOverLabel.name = "gameOverLabel"
        addChild(gameOverLabel)
        
        let fadeIn = SKAction.fadeIn(withDuration: 1)
        let appear = SKAction.sequence([fadeIn])
        gameOverLabel.run(appear)
        
        // –°—Ç–≤–æ—Ä—é—î–º–æ –∫–Ω–æ–ø–∫—É Restart
        restartLabel = SKLabelNode(fontNamed: "Chalkduster")
        restartLabel.text = "Tap to Restart"
        restartLabel.fontSize = 40
        restartLabel.position = CGPoint(x: frame.midX, y: frame.midY - 50)
        restartLabel.zPosition = 10
        restartLabel.name = "restartLabel"
        addChild(restartLabel)
        
        // –ü–ª–∞–≤–Ω–∞ –ø–æ—è–≤–∞ –ø—ñ—Å–ª—è Game Over
        let scaleUp = SKAction.scale(to: 1, duration: 0.6)
        let scaleDown = SKAction.scale(to: 0.5, duration: 0.2)
        let appear2 = SKAction.sequence([scaleUp, scaleDown, scaleUp])
        restartLabel.run(appear2)
    }
}
