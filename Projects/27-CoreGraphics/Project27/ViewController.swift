//
//  ViewController.swift
//  Project27
//
//  Created by mac on 04.08.2025.
//

import UIKit

class ViewController: UIViewController {
    
    // MARK: - Outlets
    @IBOutlet var imageView: UIImageView!
    
    // MARK: - Properties
    var currentDrawtype = 0
    private let canvasSize = CGSize(width: 512, height: 512)
    
    // MARK: - Lifecycle
    override func viewDidLoad() {
        super.viewDidLoad()
        drawRectangle()
    }
    
    // MARK: - Actions
    // –¶–µ —Ñ—É–Ω–∫—Ü—ñ—è –∫–Ω–æ–ø–∫–∏. –ö–æ–∂–Ω–µ –Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—è ‚Äî –ø–æ–∫–∞–∑—É—î –Ω–æ–≤–∏–π –º–∞–ª—é–Ω–æ–∫.
    @IBAction func redrawTapped(_ sender: Any) {
        currentDrawtype += 1
        
        if currentDrawtype > 7 {
            currentDrawtype = 0
        }
        
        switch currentDrawtype {
        case 0: drawRectangle()
        case 1: drawCircle()
        case 2: drawCheckerboard()
        case 3: drawRotatedSquares()
        case 4: drawLines()
        case 5: drawImagesAndText()
        case 6: drawStarEmoji()
        case 7: drawTWIN()
        default: break
        }
    }
}

// MARK: - Drawing Methods

// MARK: Rectangle
private extension ViewController {
    func drawRectangle() {
        // "—Ä–µ–Ω–¥–µ—Ä-–±–ª–æ–∫", —É —è–∫–æ–º—É —Ç–∏ –æ–ø–∏—Å—É—î—à, —â–æ —Å–∞–º–µ –º–∞–ª—é–≤–∞—Ç–∏:
        // –í—Å–µ, —â–æ –Ω–∞–º–∞–ª—é—î—Ç—å—Å—è –≤ —Ü—å–æ–º—É –±–ª–æ—Ü—ñ, –±—É–¥–µ –∑–∞–ø–∏—Å–∞–Ω–æ –≤ –æ–±'—î–∫—Ç UIImage, —è–∫–∏–π –ø–æ–≤–µ—Ä—Ç–∞—î –º–µ—Ç–æ–¥ image(...).
        imageView.image = renderImage { ctx in
            let rectangle = CGRect(origin: .zero, size: canvasSize)
            
            ctx.setFillColor(UIColor.red.cgColor)
            // –≤—Å—Ç–∞–Ω–æ–≤–ª—é—î –∫–æ–ª—ñ—Ä –∑–∞–ª–∏–≤–∫–∏ –Ω–∞—à–æ—ó —Ñ—ñ–≥—É—Ä–∏,
            
            ctx.setStrokeColor(UIColor.black.cgColor)
            // –≤—Å—Ç–∞–Ω–æ–≤–ª—é—î –∫–æ–ª—ñ—Ä –æ–±–≤–µ–¥–µ–Ω–Ω—è –Ω–∞—à–æ—ó —Ñ—ñ–≥—É—Ä–∏,
            
            ctx.setLineWidth(10)
            // —Ä–µ–≥—É–ª—é—î —à–∏—Ä–∏–Ω—É –ª—ñ–Ω—ñ—ó, —è–∫–∞ –±—É–¥–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏—Å—è –¥–ª—è –æ–±–≤–µ–¥–µ–Ω–Ω—è,
            
            ctx.addRect(rectangle)
            // –¥–æ–¥–∞—î –ø—Ä—è–º–æ–∫—É—Ç–Ω–∏–π –∫–æ–Ω—Ç—É—Ä –¥–æ CGRect,
            
            ctx.drawPath(using: .fillStroke)
            //  –º–∞–ª—é—î –ø–æ—Ç–æ—á–Ω–∏–π –∫–æ–Ω—Ç—É—Ä —Ñ—ñ–≥—É—Ä–∏
        }
    }
    
    // MARK: Circle
    func drawCircle() {
        imageView.image = renderImage { ctx in
            let rectangle = CGRect(origin: .zero, size: canvasSize).insetBy(dx: 5, dy: 5)
            // –∑–º–µ–Ω—à—É—î–º–æ –ø—Ä—è–º–æ–∫—É—Ç–Ω–∏–∫ –∑ —É—Å—ñ—Ö —Å—Ç–æ—Ä—ñ–Ω –Ω–∞ 5 ‚Äî —â–æ–± –æ–±–≤–æ–¥–∫–∞ –Ω–µ –≤–∏–π—à–ª–∞ –∑–∞ –º–µ–∂—ñ
            
            ctx.setFillColor(UIColor.red.cgColor)
            ctx.setStrokeColor(UIColor.black.cgColor)
            ctx.setLineWidth(10)
            ctx.addEllipse(in: rectangle)  // –¥–æ–¥–∞—î –∫–æ–Ω—Ç—É—Ä –µ–ª—ñ–ø—Å–∞ –¥–æ –ø—Ä—è–º–æ–∫—É—Ç–Ω–∏–∫–∞
            ctx.drawPath(using: .fillStroke)  //  –º–∞–ª—é—î –ø–æ—Ç–æ—á–Ω–∏–π –∫–æ–Ω—Ç—É—Ä –Ω–∞—à–æ—ó —Ñ—ñ–≥—É—Ä–∏
        }
    }
    
    // MARK: Checkerboard
    func  drawCheckerboard() {
        imageView.image = renderImage { ctx in
            ctx.setFillColor(UIColor.black.cgColor)
            
            for row in 0 ..< 8 {
                for col in 0 ..< 8  {
                    // –¶–∏–∫–ª –º–∞–ª—é—î –ª–∏—à–µ –ø–æ–ª–æ–≤–∏–Ω—É –∫–ª—ñ—Ç–∏–Ω–æ–∫ (–ø–∞—Ä–Ω—ñ –ø–æ–∑–∏—Ü—ñ—ó) —á–æ—Ä–Ω–∏–º –∫–æ–ª—å–æ—Ä–æ–º
                    if (row + col) % 2 == 0 {
                        let square = CGRect(x: col * 64, y: row * 64, width: 64, height: 64)
                        ctx.fill(square)
                    }
                }
            }
        }
    }
    
    // MARK: Rotated Squares
    func  drawRotatedSquares() {
        imageView.image = renderImage { ctx in
            ctx.translateBy(x: 256, y: 256)
            // –¢–µ–ø–µ—Ä —É—Å–µ –º–∞–ª—é–≤–∞–Ω–Ω—è –±—É–¥–µ –≤—ñ–¥–±—É–≤–∞—Ç–∏—Å—å –≤—ñ–¥–Ω–æ—Å–Ω–æ —Ü–µ–Ω—Ç—Ä—É, –∞ –Ω–µ –≤—ñ–¥ –∫—É—Ç–∞ (0,0)
            
            let rotations = 16
            let amount  = Double.pi / Double(rotations) // –∫—É—Ç –æ–±–µ—Ä—Ç–∞–Ω–Ω—è - 11.25¬∞
            
            for _ in 0 ..< rotations {
                ctx.rotate(by: CGFloat(amount))   // –Ω–µ –ø–æ–≤–µ—Ä—Ç–∞—î —Å–∞–º—É —Ñ—ñ–≥—É—Ä—É, –∞ –≤—Å—é —Å–∏—Å—Ç–µ–º—É –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç
                ctx.addRect(CGRect(x: -128, y: -128, width: 256, height: 256))
            }
            
            ctx.setStrokeColor(UIColor.black.cgColor)
            ctx.strokePath()
            //  –ú–∞–ª—é—î–º–æ –∫–≤–∞–¥—Ä–∞—Ç, –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∏, –∑–Ω–æ–≤—É –º–∞–ª—é—î–º–æ. –Ü —Ç–∞–∫ 16 —Ä–∞–∑—ñ–≤ ‚Äî –æ—Ç—Ä–∏–º—É—î–º–æ —Ñ—ñ–≥—É—Ä—É —è–∫ –∑ –∫–∞–ª–µ–π–¥–æ—Å–∫–æ–ø–∞.
        }
    }
    
    // MARK: Lines Spiral
    func  drawLines() {
        imageView.image = renderImage { ctx in
            ctx.translateBy(x: 256, y: 256)
            // –¢–µ–ø–µ—Ä —É—Å–µ –º–∞–ª—é–≤–∞–Ω–Ω—è –±—É–¥–µ –≤—ñ–¥–±—É–≤–∞—Ç–∏—Å—å –≤—ñ–¥–Ω–æ—Å–Ω–æ —Ü–µ–Ω—Ç—Ä—É, –∞ –Ω–µ –≤—ñ–¥ –∫—É—Ç–∞ (0,0)
            // –ù–∞–≤—ñ—â–æ? –©–æ–± –º–∞–ª—é–≤–∞—Ç–∏ –∑ —Ü–µ–Ω—Ç—Ä—É, –∞ –Ω–µ –∑ –≤–µ—Ä—Ö–Ω—å–æ–≥–æ –ª—ñ–≤–æ–≥–æ –∫—É—Ç–∞.
            
            var first = true
            var length: CGFloat = 256
            
            for _ in 0 ..< 256 {
                ctx.rotate(by: .pi / 2)
                // –ü–æ–≤–µ—Ä—Ç–∞—î —Å–∏—Å—Ç–µ–º—É –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –Ω–∞ 90¬∞ –ø—Ä–æ—Ç–∏ –≥–æ–¥–∏–Ω–Ω–∏–∫–æ–≤–æ—ó —Å—Ç—Ä—ñ–ª–∫–∏
                
                if first {
                    ctx.move(to: CGPoint(x: length, y: 50))
                    first = false
                } else {
                    ctx.addLine(to: CGPoint(x: length, y: 50))
                    // –ú–∞–ª—é—î –ª—ñ–Ω—ñ—é –¥–æ –Ω–æ–≤–æ—ó —Ç–æ—á–∫–∏
                }
                
                length *= 0.99
                // –ö–æ–∂–Ω–∞ –Ω–æ–≤–∞ –ª—ñ–Ω—ñ—è —Ç—Ä–æ—Ö–∏ –∫–æ—Ä–æ—Ç—à–∞, –Ω—ñ–∂ –ø–æ–ø–µ—Ä–µ–¥–Ω—è
                // üìç –í—Å—ñ —Ç–æ—á–∫–∏ –ª—ñ–Ω—ñ–π —Ä–æ–∑—Ç–∞—à–æ–≤–∞–Ω—ñ –Ω–∞ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ñ–π –ª—ñ–Ω—ñ—ó y = 50 ‚Äî –∞–ª–µ —á–µ—Ä–µ–∑ –æ–±–µ—Ä—Ç–∞–Ω–Ω—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç —Ü—ñ –ª—ñ–Ω—ñ—ó –∫–æ–∂–Ω–æ–≥–æ —Ä–∞–∑—É –∑–º—ñ–Ω—é—é—Ç—å –Ω–∞–ø—Ä—è–º–æ–∫ (–≤–ª—ñ–≤–æ, –≤–Ω–∏–∑, –≤–ø—Ä–∞–≤–æ, –≤–≥–æ—Ä—É —Ç–æ—â–æ).
            }
            ctx.setStrokeColor(UIColor.black.cgColor)
            ctx.strokePath()                          //  –º–∞–ª—é—î –ø–æ–±—É–¥–æ–≤–∞–Ω—ñ –ª—ñ–Ω—ñ—ó
        }
    }
    
    // MARK: Image + Text
    func  drawImagesAndText() {
        // 1. C–∏–≤–æ—Ä–∏–ª–∏ –ø–æ–ª–æ—Ç–Ω–æ
        imageView.image = renderImage { ctx in
            // 2. –í–∏–∑–Ω–∞—á–∏–ª–∏ —Å—Ç–∏–ª—å –∞–±–∑–∞—Ü—É
            let paragraphStyle = NSMutableParagraphStyle()
            paragraphStyle.alignment = .center
            
            // 3. –°—Ç–≤–æ—Ä–∏–ª–∏ —Å–ª–æ–≤–Ω–∏–∫ –∞—Ç—Ä–∏–±—É—Ç—ñ–≤, —â–æ –º—ñ—Å—Ç–∏—Ç—å —Ü–µ–π —Å—Ç–∏–ª—å –∞–±–∑–∞—Ü—É, –∞ —Ç–∞–∫–æ–∂ —à—Ä–∏—Ñ—Ç.
            let attributes: [NSAttributedString.Key: Any] = [
                .font: UIFont.systemFont(ofSize: 36),
                .paragraphStyle: paragraphStyle
            ]
            
            // 4. –û–±–µ—Ä–Ω—É–ª–∏ —Ü–µ–π —Å–ª–æ–≤–Ω–∏–∫ –∞—Ç—Ä–∏–±—É—Ç—ñ–≤ —ñ —Ä—è–¥–æ–∫ —É –µ–∫–∑–µ–º–ø–ª—è—Ä NSAttributedString
            let string = """
                The best-laid schemes 0'
                \nmice an' men gang aft agley
                """
            let attributedString = NSAttributedString(string: string, attributes:  attributes)
            
            // 5. –ó–∞–≤–∞–Ω—Ç–∞–∂–∏–ª–∏ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è –∑ –ø—Ä–æ—î–∫—Ç—É —Ç–∞ –Ω–∞–º–∞–ª—é–π—Ç–µ –π–æ–≥–æ –¥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç—É
            attributedString.draw(with: CGRect(x: 32, y: 32, width: 448, height: 448), options: .usesLineFragmentOrigin, context: nil)
            
            // 6. –û–Ω–æ–≤–∏–ª–∏ –≤–∏–≥–ª—è–¥ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è –∑ –≥–æ—Ç–æ–≤–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º
            let mouse = UIImage(named: "mouse")
            mouse?.draw(at: CGPoint(x: 300, y: 150))
        }
    }
    
    // MARK: Star Emoji
    func drawStarEmoji() {
        
        imageView.image = renderImage { ctx in
            ctx.translateBy(x: 256, y: 256)
            
            // –¢—ñ–Ω—å –¥–ª—è –∑—ñ—Ä–∫–∏
            ctx.setShadow(offset: CGSize(width: 5, height: 5), blur: 8, color: UIColor.black.withAlphaComponent(0.4).cgColor)
            
            
            // --- –ì—Ä–∞–¥—ñ—î–Ω—Ç–Ω–∏–π —Ñ–æ–Ω ---
            let colors = [UIColor.systemMint.withAlphaComponent(0.5).cgColor, UIColor.white.cgColor] as CFArray
            let colorSpace = CGColorSpaceCreateDeviceRGB()
            let locations: [CGFloat] = [0.0, 1.0]
            if let gradient = CGGradient(colorsSpace: colorSpace, colors: colors, locations: locations) {
                let startPoint = CGPoint(x: -256, y: -256)
                let endPoint = CGPoint(x: -256, y: 256)
                ctx.drawLinearGradient(gradient, start: startPoint, end: endPoint, options: [])
            }
            
            // Star points
            let starPoints: [CGPoint] = [
                CGPoint(x: 200.00, y: 0.00),      // 1. –ó–æ–≤–Ω—ñ—à–Ω—è
                CGPoint(x: 64.72, y: 58.78),      // 2. –í–Ω—É—Ç—Ä—ñ—à–Ω—è
                CGPoint(x: 61.80, y: 190.21),     // 3. –ó–æ–≤–Ω—ñ—à–Ω—è
                CGPoint(x: -24.72, y: 76.36),     // 4. –í–Ω—É—Ç—Ä—ñ—à–Ω—è
                CGPoint(x: -161.80, y: 118.57),   // 5. –ó–æ–≤–Ω—ñ—à–Ω—è
                CGPoint(x: -80.00, y: 0.00),      // 6. –í–Ω—É—Ç—Ä—ñ—à–Ω—è
                CGPoint(x: -161.80, y: -118.57),  // 7. –ó–æ–≤–Ω—ñ—à–Ω—è
                CGPoint(x: -24.72, y: -76.36),    // 8. –í–Ω—É—Ç—Ä—ñ—à–Ω—è
                CGPoint(x: 61.80, y: -190.21),    // 9. –ó–æ–≤–Ω—ñ—à–Ω—è
                CGPoint(x: 64.72, y: -58.78)      // 10. –í–Ω—É—Ç—Ä—ñ—à–Ω—è
            ]
            
            ctx.move(to: starPoints[0])
            for point in starPoints.dropFirst() {
                ctx.addLine(to: point)
            }
            ctx.closePath()
            ctx.setFillColor(UIColor.systemMint.cgColor)
            ctx.setStrokeColor(UIColor.systemGray6.cgColor)
            ctx.setLineWidth(7)
            ctx.drawPath(using: .fillStroke)  //  –æ–¥–Ω–æ—á–∞—Å–Ω–æ –∑–∞–ª–∏–≤–∞—î —Ç–∞ –æ–±–≤–æ–¥–∏—Ç—å —à–ª—è—Ö
            
            // --- –†–∞–º–∫–∞ –Ω–∞–≤–∫–æ–ª–æ –ø–æ–ª–æ—Ç–Ω–∞ ---
            let borderRect = CGRect(x: -256, y: -256, width: 512, height: 512)
            ctx.setStrokeColor(UIColor.systemTeal.withAlphaComponent(0.6).cgColor)
            ctx.setLineWidth(8)
            ctx.stroke(borderRect)
        }
    }
    
    // MARK: TWIN Word
    func drawTWIN() {
        imageView.image = renderImage { ctx in
            
            // –§–æ–Ω
            ctx.setFillColor(UIColor.black.cgColor)
            ctx.fill(CGRect(x: 0, y: 0, width: 512, height: 512))
            
            // –°—Ç–∏–ª—å
            ctx.setStrokeColor(UIColor.systemIndigo.cgColor)
            ctx.setLineWidth(12)
            ctx.setLineCap(.round)       // —è–∫ –∑–∞–∫—ñ–Ω—á—É—é—Ç—å—Å—è –ª—ñ–Ω—ñ—ó (–≥–æ—Å—Ç—Ä–æ, –∫—Ä—É–≥–ª–æ)
            ctx.setLineJoin(.round)      // —è–∫ –∑‚Äô—î–¥–Ω—É—é—Ç—å—Å—è –∫—É—Ç–∏ (–≥–æ—Å—Ç—Ä—ñ, –∑–∞–∫—Ä—É–≥–ª–µ–Ω—ñ)
            
            // –ó–º—ñ—â—É—î–º–æ —Å–∏—Å—Ç–µ–º—É –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç —É —Ü–µ–Ω—Ç—Ä –ø–æ–ª–æ—Ç–Ω–∞
            ctx.translateBy(x: canvasSize.width / 2, y: canvasSize.height / 2)
            // –ó–º—ñ—â—É—î–º–æ –≤–ª—ñ–≤–æ —ñ –≤–Ω–∏–∑, —â–æ–± —Ç–µ–∫—Å—Ç —Ä–æ–∑—Ç–∞—à—É–≤–∞–≤—Å—è —Ç–æ—á–Ω–æ –ø–æ —Ü–µ–Ω—Ç—Ä—É
            ctx.translateBy(x: -180, y: -55)
            
            // T
            ctx.move(to: CGPoint(x: 0, y: 0))
            ctx.addLine(to: CGPoint(x: 80, y: 0))
            ctx.move(to: CGPoint(x: 40, y: 0))
            ctx.addLine(to: CGPoint(x: 40, y: 100))
            
            // W
            ctx.move(to: CGPoint(x: 110, y: 0))
            ctx.addLine(to: CGPoint(x: 130, y: 100))
            ctx.addLine(to: CGPoint(x: 150, y: 40))
            ctx.addLine(to: CGPoint(x: 170, y: 100))
            ctx.addLine(to: CGPoint(x: 190, y: 0))
            
            // I
            ctx.move(to: CGPoint(x: 230, y: 0))
            ctx.addLine(to: CGPoint(x: 230, y: 100))
            
            // N
            ctx.move(to: CGPoint(x: 270, y: 0))
            ctx.addLine(to: CGPoint(x: 270, y: 100))
            ctx.move(to: CGPoint(x: 320, y: 100))
            ctx.addLine(to: CGPoint(x: 270, y: 0))
            ctx.move(to: CGPoint(x: 320, y: 100))
            ctx.addLine(to: CGPoint(x: 320, y: 0))
            
            ctx.strokePath()
        }
    }
    
    // MARK: Helper
    func renderImage(_ drawing: (CGContext) -> Void) -> UIImage {
        //  –°—Ç–≤–æ—Ä–∏–ª–∏ "–ø–æ–ª–æ—Ç–Ω–æ", –Ω–∞ —è–∫–æ–º—É —Ç–∏ –º–∞–ª—é—î—à
        let renderer = UIGraphicsImageRenderer(size: canvasSize)
        return renderer.image { drawing($0.cgContext) }
    }
}

