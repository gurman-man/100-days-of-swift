============================
       Swift Debugging
============================

1. Основи та читання значень
----------------------------

Використовуй assert() скрізь, precondition() там, де потрібно, і fatalError() коли помилка може призвести до пошкодження даних.

Метод                | Виконується у дебагу | Виконується у продакшн | Пояснення
-------------------- | ------------------ | -------------------------| --------------------------------------
assert()             | Так                | Ні                       | Потребує параметр, що повертає true/false
assertionFailure()   | Так                | Ні                       | Не потребує параметрів
precondition()       | Так                | Так                      | Потребує параметр, що повертає true/false
preconditionFailure()| Так                | Так                      | Не потребує параметрів
fatalError()         | Так                | Так                      | Не потребує параметрів

LLDB — низькорівневий дебаггер. Основні команди:
- `p 7` — друкує значення змінної або результат методу у консолі.
- `po someObject` — друкує адресу об’єкта в пам’яті, напр. `<App.ExampleObj: 0x7ff4f0014260>`.
- `p someObject` — друкує адресу та властивості об’єкта, напр. `<App.ExampleObj: 0x7ff4f0014260> { username = "Gibbs", favoriteSongs = 25 }`.

⚠️ Виклик деяких методів через `p` або `po` може змінювати значення.  
Щоб безпечно переглянути локальні змінні, використовуйте frame variable (fr v):

- `fr v username` — показує значення локальної змінної без зміни.
- `expr username = "нове значення"` — змінює значення змінної під час паузи.

-----------------------------
2. Breakpoints та Watchpoints
-----------------------------

- Для кращого контролю двічі клікни на breakpoint і встанови умови (Condition).  
- Можна пропускати тригери або вказати, коли breakpoint спрацьовує.  
- Додати дії (Actions), напр.: Debugger Command → `p username`. Коли breakpoint спрацьовує, у консолі показано значення змінної.  
- Exception Breakpoint обов’язковий для великих проєктів: меню breakpoint → + → Exception Breakpoint.  
- Watchpoint зупиняє виконання, коли значення змінюється будь-якою частиною коду.  
- Breakpoint зупиняє виконання, коли досягнуто певної локації або події.  
- Щоб встановити watchpoint: breakpoint → правий клік на змінну → Watch "ім’яЗмінної".

----------------------------
3. Layout Debugging
----------------------------

- Присвой усім UIView унікальні `identifiers`, щоб у консолі легко зрозуміти, який view дебажиться.  
- Використовуй Visual Debugger (Capture View Hierarchy) для перегляду ієрархії view у 3D.  
- Допомагає знаходити приховані або перекриті елементи.

----------------------------
Quick Cheat Sheet
----------------------------

1. Assert / Precondition / Fatal
- `assert(condition, "message")` — перевірка в дебагу, не виконується у продакшн
- `assertionFailure("message")` — одразу помилка в дебагу
- `precondition(condition, "message")` — перевірка в дебагу та продакшн
- `preconditionFailure("message")` — помилка в дебагу та продакшн
- `fatalError("message")` — миттєва помилка, завершення програми

2. LLDB Commands
- `p variable` — показати значення змінної
- `po object` — показати об’єкт та його властивості
- `fr v variable` — безпечний перегляд локальної змінної
- `expr variable = newValue` — змінити значення змінної під час паузи

3. Breakpoints
- Двічі клік → умова (Condition)
- Дії (Actions): Debugger Command → `p username`
- Exception Breakpoint: + → Exception Breakpoint → зупинка на помилці
- Watchpoint: зупиняє код при зміні значення змінної  
  → встановлюється через breakpoint → правий клік на змінну → Watch "ім’яЗмінної"

4. Layout Debugging
- Встановлюйте `accessibilityIdentifier` або `identifier` для view
- Використовуйте Capture View Hierarchy → перегляд 3D layout
- Дивіться перекриття або приховані елементи

5. Tips
- Використовуйте assert() скрізь, щоб не пропустити помилки
- Використовуйте watchpoints для відстеження важливих змін
- Використовуйте Visual Debugger для UI-елементів
- Користуйтесь LLDB для швидкого інспекту та зміни змінних
