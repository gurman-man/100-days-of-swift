//
//  GameScene.swift
//  Project23
//
//  Created by mac on 11.07.2025.
//
import AVFoundation
import SpriteKit

// MARK: - Enums -
enum ForceBomb {
    case never, always, random
}

enum SequenceType: CaseIterable {
    case oneNoBomb, one, twoWithOneBomb, two, three, four, chain, fastChain
}

class GameScene: SKScene {
    // MARK: - üß© Properties
    var gameOverTitle: SKLabelNode!
    var gameScore: SKLabelNode!
    var newGame: SKLabelNode!
    
    var score = 0 {
        didSet {
            gameScore.text = "Score \(score)"
        }
    }
    
    var livesImages = [SKSpriteNode]()
    var lives = 3
    var isGameEnded = false
    
    var activeSliceBG: SKShapeNode!
    var activeSliceFG: SKShapeNode!
    
    var activeSlicePoints = [CGPoint]()
    var isSwooshSoundActive = false
    var activateEnemies = [SKSpriteNode]()
    var bombSoundEffect: AVAudioPlayer?  // –ü—Ä–æ–≥—Ä–∞–≤–∞—á –∑–≤—É–∫—É "–∑–∞–ø–∞–ª—é–≤–∞–Ω–Ω—è –±–æ–º–±–∏"
    
    var popupTime = 0.9                 // —á–∞—Å –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è –º—ñ–∂ –∑–Ω–∏—â–µ–Ω–Ω—è–º –æ—Å—Ç–∞–Ω–Ω—å–æ–≥–æ –≤–æ—Ä–æ–≥–∞ —Ç–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è–º –Ω–æ–≤–æ–≥–æ
    var sequence = [SequenceType]()     // –º–∞—Å–∏–≤ –∑—á–∏—Å–ª–µ–Ω–Ω—è, —è–∫–∏–π –≤–∏–∑–Ω–∞—á–∞—î, —è–∫–∏—Ö –≤–æ—Ä–æ–≥—ñ–≤ —Å—Ç–≤–æ—Ä—é–≤–∞—Ç–∏
    var sequencePosition = 0            // –º—ñ—Å—Ü–µ, –¥–µ –º–∏ –∑–∞—Ä–∞–∑ –∑–Ω–∞—Ö–æ–¥–∏–º–æ—Å—è —É –≥—Ä—ñ
    var chainDelay = 3.0                // —á–∞—Å –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è –ø–µ—Ä–µ–¥ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è–º –Ω–æ–≤–æ–≥–æ –≤–æ—Ä–æ–≥–∞, —è–∫—â–æ —Ç–∏–ø –ø–æ—Å–ª—ñ–¥–æ–≤–Ω–æ—Å—Ç—ñ –º–∞—î –∑–Ω–∞—á–µ–Ω–Ω—è .chain –∞–±–æ .fastChain.
    var nextSequenceQueued = true       //  —â–æ–± –º–∏ –∑–Ω–∞–ª–∏, –∫–æ–ª–∏ –≤—Å—ñ –≤–æ—Ä–æ–≥–∏ –∑–Ω–∏—â–µ–Ω—ñ —ñ –º–æ–∂–Ω–∞ —Å—Ç–≤–æ—Ä—é–≤–∞—Ç–∏ –Ω–æ–≤–∏—Ö.
    
    var enemyCallCount = 0              // –ª—ñ—á–∏–ª—å–Ω–∏–∫ - —Å–∫—ñ–ª—å–∫–∏ –≤–æ—Ä–æ–≥—ñ–≤ –±—É–ª–æ —Å—Ç–≤–æ—Ä–µ–Ω–æ
    var goldenEnemyIsActive = false     // –ø—Ä–∞–ø–æ—Ä–µ—Ü—å, –ª–∏—à–µ –¥–ª—è –æ–¥–Ω–æ–≥–æ –∑–æ–ª–æ—Ç–æ–≥–æ –ø—ñ–Ω–≥–≤—ñ–Ω–∞
        
    // –ö–æ–Ω—Å—Ç–∞–Ω—Ç–∏ –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –≤–æ—Ä–æ–≥–∞
        
    /// –†–∞–¥—ñ—É—Å —Ñ—ñ–∑–∏—á–Ω–æ–≥–æ —Ç—ñ–ª–∞ –≤–æ—Ä–æ–≥–∞ (–≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è –¥–ª—è –∑—ñ—Ç–∫–Ω–µ–Ω—å —Ç–∞ —Ä—É—Ö—É)
    let enemyRadius: CGFloat = 64

    /// –ú—ñ–Ω—ñ–º–∞–ª—å–Ω–∞ –∫—É—Ç–æ–≤–∞ —à–≤–∏–¥–∫—ñ—Å—Ç—å –æ–±–µ—Ä—Ç–∞–Ω–Ω—è –≤–æ—Ä–æ–≥–∞ (–æ–±–µ—Ä—Ç–∞—î—Ç—å—Å—è –ø—Ä–æ—Ç–∏ –≥–æ–¥–∏–Ω–Ω–∏–∫–æ–≤–æ—ó —Å—Ç—Ä—ñ–ª–∫–∏)
    let enemyMinAngularVelocity: CGFloat = -3

    /// –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞ –∫—É—Ç–æ–≤–∞ —à–≤–∏–¥–∫—ñ—Å—Ç—å –æ–±–µ—Ä—Ç–∞–Ω–Ω—è –≤–æ—Ä–æ–≥–∞ (–æ–±–µ—Ä—Ç–∞—î—Ç—å—Å—è –∑–∞ –≥–æ–¥–∏–Ω–Ω–∏–∫–æ–≤–æ—é —Å—Ç—Ä—ñ–ª–∫–æ—é)
    let enemyMaxAngularVelocity: CGFloat = 3

    /// –ú—ñ–Ω—ñ–º–∞–ª—å–Ω–∞ –ø–æ—á–∞—Ç–∫–æ–≤–∞ X-–ø–æ–∑–∏—Ü—ñ—è –≤–æ—Ä–æ–≥–∞ –Ω–∞ –µ–∫—Ä–∞–Ω—ñ (–ª—ñ–≤–∏–π –∫—Ä–∞–π)
    let enemyMinXPosition = 64

    /// –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞ –ø–æ—á–∞—Ç–∫–æ–≤–∞ X-–ø–æ–∑–∏—Ü—ñ—è –≤–æ—Ä–æ–≥–∞ –Ω–∞ –µ–∫—Ä–∞–Ω—ñ (–ø—Ä–∞–≤–∏–π –∫—Ä–∞–π)
    let enemyMaxXPosition = 960

    /// –ü–æ—á–∞—Ç–∫–æ–≤–∞ Y-–ø–æ–∑–∏—Ü—ñ—è –≤–æ—Ä–æ–≥–∞ (–Ω–∏–∂—á–µ –∑–∞ –µ–∫—Ä–∞–Ω ‚Äî —â–æ–± –ø—ñ–¥–ª—ñ—Ç–∞–≤ –∑–Ω–∏–∑—É)
    let enemyStartYPosition = -128

    /// –ú—ñ–Ω—ñ–º–∞–ª—å–Ω–∞ –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–∞ —à–≤–∏–¥–∫—ñ—Å—Ç—å –≤–æ—Ä–æ–≥–∞ (Y) ‚Äî —è–∫ –ø–æ–≤—ñ–ª—å–Ω–æ –ø—ñ–¥–ª—ñ—Ç–∞—î –≤–≥–æ—Ä—É
    let enemyMinYVelocity = 24

    /// –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞ –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–∞ —à–≤–∏–¥–∫—ñ—Å—Ç—å –≤–æ—Ä–æ–≥–∞ (Y) ‚Äî —è–∫ —à–≤–∏–¥–∫–æ –ø—ñ–¥–ª—ñ—Ç–∞—î –≤–≥–æ—Ä—É
    let enemyMaxYVelocity = 32

    /// –ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–∞ —à–≤–∏–¥–∫—ñ—Å—Ç—å –≤–æ—Ä–æ–≥—ñ–≤, —è–∫—ñ –∑ º—è–≤–ª—è—é—Ç—å—Å—è –∑–ª—ñ–≤–∞ (—Ä—É—Ö–∞—é—Ç—å—Å—è –≤–ø—Ä–∞–≤–æ)
    let leftXVelocityRange = 8...15

    /// –ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–∞ —à–≤–∏–¥–∫—ñ—Å—Ç—å –≤–æ—Ä–æ–≥—ñ–≤, —è–∫—ñ –∑ º—è–≤–ª—è—é—Ç—å—Å—è –±–ª–∏–∂—á–µ –¥–æ —Ü–µ–Ω—Ç—Ä—É –ª—ñ–≤–æ—Ä—É—á (–ø–æ–≤—ñ–ª—å–Ω—ñ—à–µ –≤–ø—Ä–∞–≤–æ)
    let centerXVelocityRange = 3...5

    /// –ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–∞ —à–≤–∏–¥–∫—ñ—Å—Ç—å –≤–æ—Ä–æ–≥—ñ–≤, —è–∫—ñ –∑ º—è–≤–ª—è—é—Ç—å—Å—è –±–ª–∏–∂—á–µ –¥–æ —Ü–µ–Ω—Ç—Ä—É –ø—Ä–∞–≤–æ—Ä—É—á (–ø–æ–≤—ñ–ª—å–Ω—ñ—à–µ –≤–ª—ñ–≤–æ)
    let centerRightXVelocityRange = -5 ... -3

    /// –ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–∞ —à–≤–∏–¥–∫—ñ—Å—Ç—å –≤–æ—Ä–æ–≥—ñ–≤, —è–∫—ñ –∑ º—è–≤–ª—è—é—Ç—å—Å—è –ø—Ä–∞–≤–æ—Ä—É—á (—à–≤–∏–¥–∫–æ –ª–µ—Ç—è—Ç—å –≤–ª—ñ–≤–æ)
    let rightXVelocityRange = -15 ... -8


    // MARK: - üé¨ Scene Lifecycle
    override func didMove(to view: SKView) {
        isGameEnded = false   // —Å–∫–∏–¥–∞—î–º–æ –ø—Ä–∞–ø–æ—Ä–µ—Ü—å –ø—Ä–∏ —Å—Ç–∞—Ä—Ç—ñ —Å—Ü–µ–Ω–∏
        isUserInteractionEnabled = true
        
        let background = SKSpriteNode(imageNamed: "sliceBackground")
        background.position = CGPoint(x: 512, y: 384)
        background.blendMode = .replace
        background.zPosition = -1
        addChild(background)
        
        physicsWorld.gravity = CGVector(dx: 0, dy: -6)  // –ì—Ä–∞–≤—ñ—Ç–∞—Ü—ñ—è –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤–Ω–∏–∑
        physicsWorld.speed = 0.85   //  —Å–ø–æ–≤—ñ–ª—å–Ω—é—î —Ñ—ñ–∑–∏—á–Ω—É —Å–∏–º—É–ª—è—Ü—ñ—é
        
        createScore()
        createLives()
        createSlices()
        
        sequence = [.oneNoBomb, .oneNoBomb, .twoWithOneBomb, .twoWithOneBomb, .three, .one, .chain]
        
        for _ in 0...1000 {
            if let nextSequence = SequenceType.allCases.randomElement() {
                sequence.append(nextSequence)
            }
        }
        
        DispatchQueue.main.asyncAfter(deadline: .now() + 2) { [weak self] in
            self?.tossEnemies()
        }
    }
    
    // MARK: - üß± UI Elements Setup
    func createScore() {
        gameScore = SKLabelNode(fontNamed: "Chalkduster")
        gameScore.horizontalAlignmentMode = .left
        gameScore.fontSize = 46
        addChild(gameScore)
        
        gameScore.position = CGPoint(x: 8, y: 8)
        score = 0
    }
    
    func createLives() {
        for i in 0 ..< 3 {
            let spiteNode = SKSpriteNode(imageNamed: "sliceLife")
            spiteNode.position = CGPoint(x: CGFloat(834 + (i * 70)), y: 720)
            addChild(spiteNode)
            livesImages.append(spiteNode)
        }
    }
    
    func createSlices() {
        activeSliceBG = SKShapeNode()
        activeSliceBG.zPosition = 2
        
        activeSliceFG = SKShapeNode()
        activeSliceFG.zPosition = 3
        
        activeSliceBG.strokeColor = UIColor(red: 1, green: 0.9, blue: 0, alpha: 1)
        activeSliceBG.lineWidth = 9
        
        activeSliceFG.strokeColor = .white
        activeSliceFG.lineWidth = 5
        
        addChild(activeSliceBG)
        addChild(activeSliceFG)
    }
    
    
    // MARK: - üñê Touch Handling
    
    // touchesBegan —Å–ø—Ä–∞—Ü—å–æ–≤—É—î, –∫–æ–ª–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –ø–æ—á–∏–Ω–∞—î —Ç–æ—Ä–∫–∞—Ç–∏—Å—å –µ–∫—Ä–∞–Ω—É
    override func touchesBegan(_ touches: Set<UITouch>, with event: UIEvent?) {
        guard let touch = touches.first else { return }
        activeSlicePoints.removeAll(keepingCapacity: true)  // ‚Äî –æ—á–∏—â–∞—î–º–æ –º–∞—Å–∏–≤ —Ç–æ—á–æ–∫ –ø–æ–ø–µ—Ä–µ–¥–Ω—å–æ–≥–æ –∂–µ—Å—Ç—É
        
        let location = touch.location(in: self)
        activeSlicePoints.append(location)
        redrawActiveSlice()
        
        // –°–∫–∞—Å–æ–≤—É—î–º–æ –≤—Å—ñ –¥—ñ—ó (–∞–Ω—ñ–º–∞—Ü—ñ—ó –∑–≥–∞—Å–∞–Ω–Ω—è), —è–∫—â–æ —é–∑–µ—Ä –∑–Ω–æ–≤—É –¥–æ—Ç–æ—Ä–∫–Ω—É–≤—Å—è.
        activeSliceBG.removeAllActions()
        activeSliceFG.removeAllActions()
        
        // –ü–æ–≤–Ω—ñ—Å—Ç—é –ø–æ–∫–∞–∑—É—î–º–æ –ª—ñ–Ω—ñ—ó (alpha = 1), —è–∫—â–æ –≤–æ–Ω–∏ –±—É–ª–∏ –∑–∞—Ç–µ–º–Ω–µ–Ω—ñ.
        activeSliceBG.alpha = 1
        activeSliceFG.alpha = 1
    }
    
    // –í–∏–∫–ª–∏–∫–∞—î—Ç—å—Å—è —â–æ—Ä–∞–∑—É, –∫–æ–ª–∏ –ø–∞–ª–µ—Ü—å —Ä—É—Ö–∞—î—Ç—å—Å—è –ø–æ –µ–∫—Ä–∞–Ω—É
    override func touchesMoved(_ touches: Set<UITouch>, with event: UIEvent?) {
        guard isGameEnded == false else { return }
        
        guard let touch = touches.first else { return }
        let location = touch.location(in: self)
        activeSlicePoints.append(location)
        redrawActiveSlice() // –¥–ª—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Ç—Ä–∞—î–∫—Ç–æ—Ä—ñ—ó –ª—ñ–Ω—ñ—ó —Ä–æ–∑—Ä—ñ–∑—É
        
        //  –Ø–∫—â–æ –∑–≤—É–∫ "—Å–≤—É—à—É" –∑–∞—Ä–∞–∑ –Ω–µ –≥—Ä–∞—î
        if !isSwooshSoundActive {
            playSwooshSound()
        }
        
        //  –æ—Ç—Ä–∏–º—É—î–º–æ —É—Å—ñ –Ω–æ–¥–∏ –≤ —Ç–æ—á—Ü—ñ, –∫—É–¥–∏ –ø–µ—Ä–µ–º—ñ—Å—Ç–∏–≤—Å—è –ø–∞–ª–µ—Ü—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        let nodesAtPoint = nodes(at: location)
        
        // –¶–∏–∫–ª –ø–µ—Ä–µ–±–∏—Ä–∞—î —Ç—ñ–ª—å–∫–∏ –æ–±'—î–∫—Ç–∏ —Ç–∏–ø—É SKSpriteNode, —ñ–≥–Ω–æ—Ä—É—é—á–∏ —ñ–Ω—à—ñ —Ç–∏–ø–∏ –Ω–æ–¥
        for case let node as SKSpriteNode in nodesAtPoint {
            if node.name == "enemy" {
                // –∑–Ω–∏—â–µ–Ω–Ω—è –ø—ñ–Ω–≥–≤—ñ–Ω–∞
                
                if let emitter = SKEmitterNode(fileNamed: "sliceHitEnemy") {
                    emitter.position = node.position
                    addChild(emitter)
                }
                
                node.name = ""
                node.physicsBody?.isDynamic = false                         // —â–æ–± —Ç—ñ–ª–æ –Ω–µ –ø–∞–¥–∞–ª–æ
                let scaleOut = SKAction.scale(to: 0.001, duration: 0.2)
                let fadeOut = SKAction.fadeOut(withDuration: 0.2)
                let group = SKAction.group([scaleOut, fadeOut])             // –≤–∏–∫–æ–Ω—É—î –æ–¥–Ω–æ—á–∞—Å–Ω–æ
                
                let seq = SKAction.sequence([group, .removeFromParent()])   // –≤–∏–∫–æ–Ω—É—î –ø–æ —á–µ—Ä–∑—ñ
                node.run(seq)
                
                score += 1
                
                
                if let index = activateEnemies.firstIndex(of: node) {
                    activateEnemies.remove(at: index)
                }
                
                run(SKAction.playSoundFileNamed("whack.caf", waitForCompletion: false))
            } else if node.name == "goldEnemy" {
                // –∑–Ω–∏—â–µ–Ω–Ω—è –ó–û–õ–û–¢–û–ì–û –ø—ñ–Ω–≥–≤—ñ–Ω–∞
                
                if let emitter = SKEmitterNode(fileNamed: "sliceHitGold") {
                    emitter.position = node.position
                    addChild(emitter)
                }
                
                node.name = ""
                node.physicsBody?.isDynamic = false
                // —à–≤–∏–¥–∫–æ "—Å–ø–∞–ª–∞—Ö—É—î" (–∑–±—ñ–ª—å—à—É—î—Ç—å—Å—è),
                // –ü–æ—Ç—ñ–º –ø–ª–∞–≤–Ω–æ –∑–Ω–∏–∫–∞—î ‚Äî –≤–∏–≥–ª—è–¥–∞—î —è—Å–∫—Ä–∞–≤–æ —Ç–∞ –ø—Ä–µ–º—ñ–∞–ª—å–Ω–æ
                let scaleUp = SKAction.scale(to: 1.3, duration: 0.05)
                let scaleOut = SKAction.scale(to: 0.001, duration: 0.2)
                let fadeOut = SKAction.fadeOut(withDuration: 0.2)
                let shrinkAndFade = SKAction.group([scaleOut, fadeOut])
                let seq = SKAction.sequence([scaleUp, shrinkAndFade, .removeFromParent()])
                node.run(seq)
                
                score += 5
                
                if let index = activateEnemies.firstIndex(of: node) {
                    activateEnemies.remove(at: index)
                }
                
                // –°–∫–∏–¥–∞—î –ø—Ä–∞–ø–æ—Ä–µ—Ü—å, –∫–æ–ª–∏ –∑–æ–ª–æ—Ç–æ–≥–æ –ø—ñ–Ω–≥–≤—ñ–Ω–∞ –∑–Ω–∏—â–µ–Ω–æ
                goldenEnemyIsActive = false
                
                run(SKAction.playSoundFileNamed("whack.caf", waitForCompletion: false))
                
            } else if node.name == "bomb" {
                // –∑–Ω–∏—â–µ–Ω–Ω—è –±–æ–º–±–∏
                // –ë–æ–º–±–∞ ‚Äî —Ü–µ –≤–∫–ª–∞–¥–µ–Ω–∏–π —Å–ø—Ä–∞–π—Ç, —Ç–æ–∂ –ø–æ—Ç—Ä—ñ–±–Ω–æ –æ–±—Ä–æ–±–∏—Ç–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
                guard let bombContainer = node.parent as? SKSpriteNode else { continue }
            
                if let emitter = SKEmitterNode(fileNamed: "sliceHitBomb") {
                    emitter.position = bombContainer.position
                    addChild(emitter)
                }
                
                node.name = ""
                bombContainer.physicsBody?.isDynamic = false
                
                let scaleOut = SKAction.scale(to: 0.001, duration: 0.2)
                let fadeOut = SKAction.fadeOut(withDuration: 0.2)
                let group = SKAction.group([scaleOut, fadeOut])
                
                let seq = SKAction.sequence([group, .removeFromParent()])
                bombContainer.run(seq)
                
                if let index = activateEnemies.firstIndex(of: bombContainer) {
                    activateEnemies.remove(at: index)
                }
                
                run(SKAction.playSoundFileNamed("explosion.caf", waitForCompletion: false))
                endGame(triggeredByBomb: true)
            }
        }
    }
    
    // –ö–æ–ª–∏ –ø–∞–ª–µ—Ü—å –ø—ñ–¥–Ω—è—Ç–æ –∑ –µ–∫—Ä–∞–Ω–∞, –≤–∏–∫–æ–Ω—É—î–º–æ –∞–Ω—ñ–º–∞—Ü—ñ—é –∑–≥–∞—Å–∞–Ω–Ω—è (fade out) –ª—ñ–Ω—ñ–π
    override func touchesEnded(_ touches: Set<UITouch>, with event: UIEvent?) {
        activeSliceBG.run(SKAction.fadeOut(withDuration: 0.25))
        activeSliceFG.run(SKAction.fadeOut(withDuration: 0.25))
        
        guard let touch = touches.first else { return }
        let location = touch.location(in: self)
        
        // –Ø–∫—â–æ –Ω–∞—Ç–∏—Å–Ω—É–ª–∏ –Ω–∞ "New Game" –ø—ñ—Å–ª—è –ø—Ä–æ–≥—Ä–∞—à—É
        if isGameEnded, let newGame = newGame, newGame.contains(location) {
            startNewGame()
        }
    }
    
    // MARK: - ‚úèÔ∏è Slice Drawing
    
    // –ú–µ—Ç–æ–¥, —è–∫–∏–π –≤—ñ–∑—É–∞–ª—ñ–∑—É—î —Ä—É—Ö –ø–∞–ª—å—Ü—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ —É –≤–∏–≥–ª—è–¥—ñ –∫—Ä–∞—Å–∏–≤–æ—ó –ª—ñ–Ω—ñ—ó
    func redrawActiveSlice() {
        
        //  1. –Ø–∫—â–æ –∑–∞–Ω–∞–¥—Ç–æ –º–∞–ª–æ —Ç–æ—á–æ–∫ ‚Äî –Ω–µ –º–∞–ª—é–≤–∞—Ç–∏ –ª—ñ–Ω—ñ—é:
        if activeSlicePoints.count < 2 {
            activeSliceBG.path = nil
            activeSliceFG.path = nil
            return
        }
        
        //  2. –û–±–º–µ–∂–µ–Ω–Ω—è –∫—ñ–ª—å–∫–æ—Å—Ç—ñ —Ç–æ—á–æ–∫:
        //  –©–æ–± –ª—ñ–Ω—ñ—è –Ω–µ –±—É–ª–∞ –Ω–µ—Å–∫—ñ–Ω—á–µ–Ω–Ω–æ—é (—ñ –Ω–µ –∑–Ω–∏–∂—É–≤–∞–ª–∞ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å), –∑–±–µ—Ä—ñ–≥–∞—î–º–æ –ª–∏—à–µ –æ—Å—Ç–∞–Ω–Ω—ñ 12 —Ç–æ—á–æ–∫.
        if activeSlicePoints.count > 12 {
            activeSlicePoints.removeFirst(activeSlicePoints.count - 12)
        }
        
        //  3. –ü–æ–±—É–¥–æ–≤–∞ —à–ª—è—Ö—É:
        let path = UIBezierPath()
        path.move(to: activeSlicePoints[0])
        
        //  4. –î–æ–¥–∞—î–º–æ –ª—ñ–Ω—ñ—ó –º—ñ–∂ —É—Å—ñ–º–∞ —Ç–æ—á–∫–∞–º–∏:
        for i in 1 ..< activeSlicePoints.count {
            path.addLine(to: activeSlicePoints[i])
        }
        
        //   5. –ü—Ä–∏—Å–≤–æ—é—î–º–æ –ø–æ–±—É–¥–æ–≤–∞–Ω–∏–π —à–ª—è—Ö –¥–≤–æ–º –ª—ñ–Ω—ñ—è–º:
        activeSliceBG.path = path.cgPath    //  —Ç–æ–≤—Å—Ç–∏–π –∂–æ–≤—Ç–∏–π —Å–ª—ñ–¥
        activeSliceFG.path = path.cgPath    // —Ç–æ–Ω–∫–∏–π –±—ñ–ª–∏–π
    }
    
    
    func playSwooshSound() {
        // –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ –ø—Ä–∞–ø–æ—Ä–µ—Ü—å, —â–æ –∑–≤—É–∫ —É–∂–µ –∞–∫—Ç–∏–≤–Ω–∏–π ‚Äî —Ü–µ –Ω–µ –¥–æ–∑–≤–æ–ª—è—î –≤—ñ–¥—Ç–≤–æ—Ä—é–≤–∞—Ç–∏ –±–∞–≥–∞—Ç–æ –∑–≤—É–∫—ñ–≤ –æ–¥–Ω–æ—á–∞—Å–Ω–æ –ø—Ä–∏ —à–≤–∏–¥–∫–æ–º—É —Ä—É—Å—ñ.
        isSwooshSoundActive = true
        
        let randomNumber = Int.random(in: 1...3)
        let soundName = "swoosh\(randomNumber).caf"
        
        let swooshSound = SKAction.playSoundFileNamed(soundName, waitForCompletion: true) // waitForCompletion: true -  –∑–≤—É–∫ –º–∞—î –¥–æ–≥—Ä–∞—Ç–∏—Å—è –¥–æ –∫—ñ–Ω—Ü—è –ø–µ—Ä–µ–¥ —Å–∫–∏–¥–∞–Ω–Ω—è–º –ø—Ä–∞–ø–æ—Ä—Ü—è
        
        // –ó–∞–ø—É—Å–∫ –¥—ñ—ó —Ç–∞ —Å–∫–∏–¥–∞–Ω–Ω—è –ø—Ä–∞–ø–æ—Ä—Ü—è –ø—ñ—Å–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è:
        run(swooshSound) { [weak self] in
            self?.isSwooshSoundActive = false
        }
    }
    
    
    // MARK: - üí£ Enemy Creation
    // –ú–µ—Ç–æ–¥ —Å—Ç–≤–æ—Ä—é—î –∞–±–æ –ø—ñ–Ω–≥–≤—ñ–Ω–∞, –∞–±–æ –±–æ–º–±—É, –∑ –≤–∏–ø–∞–¥–∫–æ–≤–∏–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ —Ä—É—Ö—É
    func createEnemy(forceBomb: ForceBomb = .random) {
        enemyCallCount += 1
        
        let enemy: SKSpriteNode
        var enemyType = Int.random(in: 0...9)
        
        if forceBomb == .never {
            enemyType = 1                   // –≥–∞—Ä–∞–Ω—Ç–æ–≤–∞–Ω–æ –ø—ñ–Ω–≥–≤—ñ–Ω
        } else if forceBomb == .always {
            enemyType = 0                   // –≥–∞—Ä–∞–Ω—Ç–æ–≤–∞–Ω–æ –±–æ–º–±–∞
        }
        
        // üí° –¥–æ–¥–∞–π —É–º–æ–≤—É: —è–∫—â–æ –≤–∂–µ —î –∑–æ–ª–æ—Ç–∏–π –∞–±–æ —â–µ –Ω–µ —á–∞—Å ‚Äî –Ω–µ —Å—Ç–≤–æ—Ä—é–π –Ω–æ–≤–æ–≥–æ
        let shouldCreateGold = (enemyCallCount % 10 == 0 && goldenEnemyIsActive == false)
        
        if shouldCreateGold {
            // –°—Ç–≤–ª—Ä–µ–Ω–Ω—è –∑–æ–ª–æ—Ç–æ–≥–æ –ø—ñ–Ω–≥–≤—ñ–Ω–∞
            enemy = SKSpriteNode(imageNamed: "penguin")
            enemy.color = .yellow
            enemy.colorBlendFactor = 1
            run(SKAction.playSoundFileNamed("goldSound.mp3", waitForCompletion: false))
            enemy.name = "goldEnemy"
            goldenEnemyIsActive = true
            
        } else if enemyType == 0 {
            //  –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –±–æ–º–±–∏
            enemy = SKSpriteNode()
            enemy.zPosition = 1             // –©–æ–± –Ω–µ –ø–µ—Ä–µ–∫—Ä–∏–≤–∞–≤—Å—è —ñ–Ω—à–∏–º–∏ —Å–ø—Ä–∞–π—Ç–∞–º–∏
            enemy.name = "bombContainer"
            
            let bombImage = SKSpriteNode(imageNamed: "sliceBomb")
            bombImage.name = "bomb"         // –î–∏—Ç–∏–Ω–∞-–∫–∞—Ä—Ç–∏–Ω–∫–∞ ‚Äî —Å–∞–º–∞ –±–æ–º–±–∞
            enemy.addChild(bombImage)
            
            //  –ó–∞–ø—É—Å–∫ –∑–≤—É–∫—É –∑–∞–ø–∞–ª—é–≤–∞–Ω–Ω—è –±–æ–º–±–∏
            if bombSoundEffect != nil {
                bombSoundEffect?.stop()
                bombSoundEffect = nil
            }
            
            if let path = Bundle.main.url(forResource: "sliceBombFuse", withExtension: "caf") {
                if let sound = try? AVAudioPlayer(contentsOf: path) {
                    bombSoundEffect = sound
                    sound.play()            // –ó–∞–ø—É—Å–∫–∞—î–º–æ –Ω–æ–≤–∏–π –∑–≤—É–∫
                }
            }
            
            //  –î–æ–¥–∞—Ç–∏ –µ—Ñ–µ–∫—Ç —ñ—Å–∫–æ—Ä
            if let emitter = SKEmitterNode(fileNamed: "sliceFuse") {
                emitter.position = CGPoint(x: 76, y: 64)
                enemy.addChild(emitter)
            }
        } else {
            // üêß –Ø–∫—â–æ –Ω–µ –±–æ–º–±–∞ ‚Äî —Å—Ç–≤–æ—Ä—é—î—Ç—å—Å—è –ø—ñ–Ω–≥–≤—ñ–Ω:
            enemy = SKSpriteNode(imageNamed: "penguin")
            run(SKAction.playSoundFileNamed("launch.caf", waitForCompletion: false))
            enemy.name = "enemy"
        }
        
        //  üé≤ –ü–æ–ª–æ–∂–µ–Ω–Ω—è —Ç–∞ —Ñ—ñ–∑–∏–∫–∞
        //  –ó–∞–¥–∞–ª–∏ –≤–æ—Ä–æ–≥—É –≤–∏–ø–∞–¥–∫–æ–≤–µ –ø–æ–ª–æ–∂–µ–Ω–Ω—è –±—ñ–ª—è –Ω–∏–∂–Ω—å–æ–≥–æ –∫—Ä–∞—é –µ–∫—Ä–∞–Ω–∞
        let randomPosition = CGPoint(x: Int.random(in: enemyMinXPosition...enemyMaxXPosition), y: enemyStartYPosition)
        enemy.position = randomPosition
        
        //  –°—Ç–≤–æ—Ä–∏–ª–∏ –≤–∏–ø–∞–¥–∫–æ–≤—É –∫—É—Ç–æ–≤—É —à–≤–∏–¥–∫—ñ—Å—Ç—å, —è–∫–∞ —î —Ç–∏–º, —è–∫ —à–≤–∏–¥–∫–æ —â–æ—Å—å –º–∞—î –æ–±–µ—Ä—Ç–∞—Ç–∏—Å—è
        let randomAngularVelocity = CGFloat.random(in: enemyMinAngularVelocity...enemyMaxAngularVelocity)
        let randomXVelocity: Int
        
        //  –°—Ç–≤–æ—Ä–∏–ª–∏ –≤–∏–ø–∞–¥–∫–æ–≤—É —à–≤–∏–¥–∫—ñ—Å—Ç—å X (—è–∫ –¥–∞–ª–µ–∫–æ —Ä—É—Ö–∞—Ç–∏—Å—è –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–æ), —è–∫–∞ –≤—Ä–∞—Ö–æ–≤—É—î –ø–æ–∑–∏—Ü—ñ—é –≤–æ—Ä–æ–≥–∞
        if randomPosition.x < 256 {
            randomXVelocity = Int.random(in: leftXVelocityRange)
        } else if randomPosition.x < 512 {
            randomXVelocity = Int.random(in: centerXVelocityRange)
        } else if randomPosition.x < 768 {
            randomXVelocity = Int.random(in: centerRightXVelocityRange)
        } else {
            randomXVelocity = Int.random(in: rightXVelocityRange)
        }
        
        //  –°—Ç–≤–æ—Ä—ñ—Ç—å –≤–∏–ø–∞–¥–∫–æ–≤—É Y-—à–≤–∏–¥–∫—ñ—Å—Ç—å –ª–∏—à–µ –¥–ª—è —Ç–æ–≥–æ, —â–æ–± —Ä–µ—á—ñ –ª—ñ—Ç–∞–ª–∏ –∑ —Ä—ñ–∑–Ω–æ—é —à–≤–∏–¥–∫—ñ—Å—Ç—é
        // let randomYVelocity = Int.random(in: enemyMinYVelocity...enemyMaxYVelocity)
        let randomYVelocity = enemy.name == "goldEnemy" ? Int.random(in: 28...36) : Int.random(in: enemyMinYVelocity...enemyMaxYVelocity)

        
        enemy.physicsBody = SKPhysicsBody(circleOfRadius: enemyRadius)
        enemy.physicsBody?.velocity = CGVector(dx: randomXVelocity * 40, dy: randomYVelocity * 40)
        enemy.physicsBody?.angularVelocity = randomAngularVelocity
        enemy.physicsBody?.collisionBitMask = 0     // –Ω–µ –±—É–¥–µ –≤–∑–∞—î–º–æ–¥—ñ—è—Ç–∏ –∑ —ñ–Ω—à–∏–º–∏ —Ñ—ñ–∑–∏—á–Ω–∏–º–∏ —Ç—ñ–ª–∞–º–∏, —Ç—ñ–ª—å–∫–∏ –∑ –≥—Ä–∞–≤—ñ—Ç–∞—Ü—ñ—î—é
        
        addChild(enemy)
        activateEnemies.append(enemy)
    }
    
    
    // –ú–µ—Ç–æ–¥ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î –∑–∞ –≤–∏–∫–∏–¥–∞–Ω–Ω—è –≤–æ—Ä–æ–≥—ñ–≤ (–ø—ñ–Ω–≥–≤—ñ–Ω—ñ–≤ –∞–±–æ –±–æ–º–±) –Ω–∞ –µ–∫—Ä–∞–Ω
    func tossEnemies() {
        guard isGameEnded == false else { return }
        
        popupTime *= 0.991              // —ñ–Ω—Ç–µ—Ä–≤–∞–ª –º—ñ–∂ –≤–∏–∫–∏–¥–∞–º–∏ –∑–º–µ–Ω—à—É—î—Ç—å—Å—è
        chainDelay *= 0.991             // –∑–∞—Ç—Ä–∏–º–∫–∞ –º—ñ–∂ –≤–æ—Ä–æ–≥–∞–º–∏ –≤ –∞—Ç–∞–∫–∞—Ö —Ç–µ–∂ —Å–∫–æ—Ä–æ—á—É—î—Ç—å—Å—è
        physicsWorld.speed *= 1.02      // —Ñ—ñ–∑–∏–∫–∞ –≥—Ä–∏ –ø—Ä–∏—à–≤–∏–¥—à—É—î—Ç—å—Å—è –Ω–∞ 2%
        
        let sequenceType = sequence[sequencePosition]
        //  –í–∏–∑–Ω–∞—á–∞—î–º–æ, —è–∫–∏–π —Ç–∏–ø –ø–æ—Å–ª—ñ–¥–æ–≤–Ω–æ—Å—Ç—ñ –≤–æ—Ä–æ–≥—ñ–≤ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏.
        
        switch sequenceType {
        case .oneNoBomb:                        // –æ–¥–∏–Ω –≤–æ—Ä–æ–≥, –≥–∞—Ä–∞–Ω—Ç–æ–≤–∞–Ω–æ –Ω–µ –±–æ–º–±–∞
            createEnemy(forceBomb: .never)
            
        case .one:                              // –æ–¥–∏–Ω –≤–æ—Ä–æ–≥, –º–æ–∂–µ –±—É—Ç–∏ –±–æ–º–±–æ—é –∞–±–æ –ø—ñ–Ω–≥–≤—ñ–Ω–æ–º
            createEnemy()
        case .twoWithOneBomb:                   // –¥–≤–∞ –≤–æ—Ä–æ–≥–∏ ‚Äî –æ–¥–∏–Ω –∑ –Ω–∏—Ö –æ–±–æ–≤‚Äô—è–∑–∫–æ–≤–æ –±–æ–º–±–∞
            createEnemy(forceBomb: .never)
            createEnemy(forceBomb: .always)
        case .two:
            createEnemy()
            createEnemy()
        case .three:
            createEnemy()
            createEnemy()
            createEnemy()
        case .four:
            createEnemy()
            createEnemy()
            createEnemy()
            createEnemy()
            
        case .chain:            // –æ–¥–∏–Ω –≤–æ—Ä–æ–≥ –∑–∞ —ñ–Ω—à–∏–º –∑ –Ω–µ–≤–µ–ª–∏–∫–∏–º —ñ–Ω—Ç–µ—Ä–≤–∞–ª–æ–º –º—ñ–∂ –∑–∞–ø—É—Å–∫–æ–º
            createEnemy()
            
            DispatchQueue.main.asyncAfter(deadline: .now() + (chainDelay / 5.0)) { [weak self] in self?.createEnemy() }
            DispatchQueue.main.asyncAfter(deadline: .now() + (chainDelay / 5.0 * 2)) { [weak self] in self?.createEnemy() }
            DispatchQueue.main.asyncAfter(deadline: .now() + (chainDelay / 5.0 * 3)) { [weak self] in self?.createEnemy() }
            DispatchQueue.main.asyncAfter(deadline: .now() + (chainDelay / 5.0 * 4)) { [weak self] in self?.createEnemy() }
        case .fastChain:        // –≤–æ—Ä–æ–≥–∏ –∑–∞–ø—É—Å–∫–∞—é—Ç—å—Å—è –º–∞–π–∂–µ –±–µ–∑ –ø–∞—É–∑, –¥—É–∂–µ –¥–∏–Ω–∞–º—ñ—á–Ω–æ
            createEnemy()
            
            DispatchQueue.main.asyncAfter(deadline: .now() + (chainDelay / 10.0)) { [weak self] in self?.createEnemy() }
            DispatchQueue.main.asyncAfter(deadline: .now() + (chainDelay / 10.0 * 2)) { [weak self] in self?.createEnemy() }
            DispatchQueue.main.asyncAfter(deadline: .now() + (chainDelay / 10.0 * 3)) { [weak self] in self?.createEnemy() }
            DispatchQueue.main.asyncAfter(deadline: .now() + (chainDelay / 10.0 * 4)) { [weak self] in self?.createEnemy() }
        }
        sequencePosition += 1           // –ü–µ—Ä–µ—Ö–æ–¥–∏–º–æ –¥–æ –Ω–∞—Å—Ç—É–ø–Ω–æ—ó –ø–æ—Å–ª—ñ–¥–æ–≤–Ω–æ—Å—Ç—ñ
        nextSequenceQueued = false      // –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ, —â–æ –Ω–æ–≤–∞ —Ö–≤–∏–ª—è —â–µ –Ω–µ –∑–∞–ø–ª–∞–Ω–æ–≤–∞–Ω–∞
    }
    
    
    // MARK: - ‚ù§Ô∏è Lives & Score
    func subtractLife() {
        lives -= 1
        
        run(SKAction.playSoundFileNamed("wrong.caf", waitForCompletion: false))
        
        var life: SKSpriteNode
        
        if lives == 2 {
            life = livesImages[0]
        } else if lives == 1 {
            life = livesImages[1]
        } else {
            life = livesImages[2]
            endGame(triggeredByBomb: false)
        }
        
        life.texture = SKTexture(imageNamed: "sliceLifeGone")
        life.xScale = 1.3
        life.yScale = 1.3
        life.run(SKAction.scale(to: 1, duration: 0.1))
    }
    
    // MARK: - üí• Game Over & Restart
    func endGame(triggeredByBomb: Bool) {
        guard isGameEnded == false else { return }
        
        for enemy in activateEnemies {
            let fadeOut = SKAction.fadeOut(withDuration: 0.3)
            let shrink = SKAction.scale(to: 0.001, duration: 0.3)
            let group = SKAction.group([fadeOut, shrink])
            let sequence = SKAction.sequence([group, .removeFromParent()])
            enemy.run(sequence)
        }
        gameScore.isHidden = true
        activateEnemies.removeAll()
        isGameEnded = true
        
        physicsWorld.speed = 0
        
        bombSoundEffect?.stop()
        bombSoundEffect = nil
        
        
        // –í—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –∑–Ω–∏–∫–ª–∏—Ö –∂–∏—Ç—Ç—ñ–≤
        if triggeredByBomb {
            livesImages[0].texture = SKTexture(imageNamed: "sliceLifeGone")
            livesImages[1].texture = SKTexture(imageNamed: "sliceLifeGone")
            livesImages[2].texture = SKTexture(imageNamed: "sliceLifeGone")
        }
        showGameOverScreen()
    }
    
    
    func showGameOverScreen() {
        let centerX = size.width / 2
        let centerY = size.height / 2

        // –ó–∞–≥–æ–ª–æ–≤–æ–∫: GAME OVER
        gameOverTitle = SKLabelNode(fontNamed: "AvenirNext-Heavy")
        gameOverTitle.text = "GAME OVER"
        gameOverTitle.fontSize = 80
        gameOverTitle.position = CGPoint(x: centerX, y: centerY + 20)
        gameOverTitle.horizontalAlignmentMode = .center
        gameOverTitle.verticalAlignmentMode = .center
        gameOverTitle.zPosition = 10
        gameOverTitle.alpha = 0
        addChild(gameOverTitle)

        // –ö–Ω–æ–ø–∫–∞ New Game
        newGame = SKLabelNode(fontNamed: "Chalkduster")
        newGame.text = " >< New Game >< "
        newGame.fontSize = 40
        newGame.position = CGPoint(x: centerX, y: centerY - 50)
        newGame.horizontalAlignmentMode = .center
        newGame.verticalAlignmentMode = .center
        newGame.zPosition = 10
        newGame.name = "newGame"
        
        // –ö–æ–ª—å–æ—Ä–∏ —ñ —Å—Ç–∏–ª—ñ
        newGame.fontColor = UIColor.systemYellow
        newGame.alpha = 0
        newGame.setScale(0.8)
        
        newGame.setScale(1)
        addChild(newGame)

        // –ê–Ω—ñ–º–∞—Ü—ñ—è –¥–ª—è –≤—Å—ñ—Ö –ª–µ–π–±–ª—ñ–≤
        let fadeIn = SKAction.fadeIn(withDuration: 1)
        let scaleUp = SKAction.scale(to: 1.2, duration: 0.3)
        let scaleDown = SKAction.scale(to: 1.0, duration: 0.2)
        let scaleSequence = SKAction.sequence([scaleUp, scaleDown])
        let group = SKAction.group([fadeIn, scaleSequence])

        gameOverTitle.run(group)
        newGame.run(group)
    }
    
    
    // –ú–µ—Ç–æ–¥ –¥–ª—è –ø–æ—á–∞—Ç–∫—É –Ω–æ–≤–æ—ó –≥—Ä–∏
    func startNewGame() {
        // –ó–Ω–∏–∫–Ω–µ–Ω–Ω—è –≤–æ—Ä–æ–≥—ñ–≤ —ñ–∑ fade out
        for enemy in activateEnemies {
            let fadeOut = SKAction.fadeOut(withDuration: 0.3)
            let shrink = SKAction.scale(to: 0.001, duration: 0.3)
            let group = SKAction.group([fadeOut, shrink])
            let sequence = SKAction.sequence([group, .removeFromParent()])
            enemy.run(sequence)
        }
        gameScore.isHidden = false
        activateEnemies.removeAll()
        
        // –ó–Ω–∏–∫–Ω–µ–Ω–Ω—è "Game Over", "Your Score", —ñ "New Game"
        gameOverTitle?.removeFromParent()
        newGame?.removeFromParent()
        
        // –°–∫–∏–¥–∞–Ω–Ω—è –∑–Ω–∞—á–µ–Ω—å
        score = 0
        lives = 3
        livesImages.forEach { $0.texture = SKTexture(imageNamed: "sliceLife") }
        
        enemyCallCount = 0
            goldenEnemyIsActive = false
            sequencePosition = 0
            popupTime = 0.9
            chainDelay = 3.0
            nextSequenceQueued = true
            isGameEnded = false
            isUserInteractionEnabled = true
            physicsWorld.speed = 0.85

            sequence.removeAll()
            sequence = [.oneNoBomb, .oneNoBomb, .twoWithOneBomb, .twoWithOneBomb, .three, .one, .chain]
            for _ in 0...1000 {
                if let nextSequence = SequenceType.allCases.randomElement() {
                    sequence.append(nextSequence)
                }
            }

            DispatchQueue.main.asyncAfter(deadline: .now() + 1) { [weak self] in
                self?.tossEnemies()
            }
    }

    
    // MARK: - üîÑ Game Loop
    // –ú–µ—Ç–æ–¥ c–ª—ñ–¥–∫—É—î –∑–∞ –∑–≤—É–∫–æ–º –±–æ–º–±–∏
    override func update(_ currentTime: TimeInterval) {
        if activateEnemies.count > 0 {
                var nodesToRemove: [Int] = []

                for (index, node) in activateEnemies.enumerated() {
                    if node.position.y < -140 {
                        node.removeAllActions()

                        if node.name == "enemy" {
                            node.name = ""
                            subtractLife()
                            node.removeFromParent()
                            nodesToRemove.append(index)

                        } else if node.name == "bombContainer" {
                            node.name = ""
                            node.removeFromParent()
                            nodesToRemove.append(index)
                        }
                    }
                }
            // –≤–∏–¥–∞–ª—è—î–º–æ –ø—ñ—Å–ª—è —Ü–∏–∫–ª—É, —â–æ–± –Ω–µ –ø–æ—Ä—É—à–∏—Ç–∏ —ñ–Ω–¥–µ–∫—Å–∏
             for index in nodesToRemove.sorted(by: >) {
                 if index < activateEnemies.count {
                     activateEnemies.remove(at: index)
                 }
             }
            
        } else {
            if !nextSequenceQueued && !isGameEnded {
                DispatchQueue.main.asyncAfter(deadline: .now() + popupTime) { [weak self] in
                    self?.tossEnemies()
                }
                
                nextSequenceQueued = true
            }
        }
        
        // –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∞–∫—Ç–∏–≤–Ω–∏—Ö –±–æ–º–±
        var bombCount = 0
        for node in activateEnemies {
            if node.name == "bombContainer" {
                bombCount += 1                  // –Ø–∫—â–æ —Ö–æ—á–∞ –± 1 –±–æ–º–±–∞ –∞–∫—Ç–∏–≤–Ω–∞ ‚Äî –ø—Ä–∞–ø–æ—Ä–µ—Ü—å
                break
            }
        }
        
        if bombCount == 0 {
            bombSoundEffect?.stop()              // –Ø–∫—â–æ –≤—Å—ñ –±–æ–º–±–∏ –∑–Ω–∏–∫–ª–∏ ‚Äî –∑—É–ø–∏–Ω—è—î–º–æ –∑–≤—É–∫
            bombSoundEffect = nil
        }
    }
}
