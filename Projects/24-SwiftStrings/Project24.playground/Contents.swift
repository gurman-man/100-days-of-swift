import UIKit

/// 1Ô∏è‚É£    –†—è–¥–∫–∏ –≤ Swift –ø–æ—Ç—É–∂–Ω—ñ, –∞–ª–µ –Ω–µ –∑–∞–≤–∂–¥–∏ —ñ–Ω—Ç—É—ó—Ç–∏–≤–Ω—ñ
/// 2Ô∏è‚É£    –†–æ–∑—à–∏—Ä–µ–Ω–Ω—è (extension) –¥–æ–∑–≤–æ–ª—è—é—Ç—å –∑—Ä–æ–±–∏—Ç–∏ —Ä–æ–±–æ—Ç—É –∑ —Ä—è–¥–∫–∞–º–∏ –∑—Ä—É—á–Ω—ñ—à–æ—é
/// 3Ô∏è‚É£    Swift –≤—Ä–∞—Ö–æ–≤—É—î —Å–∫–ª–∞–¥–Ω—ñ—Å—Ç—å –º–æ–≤ (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, –Ω—ñ–º–µ—Ü—å–∫–∏–π √ü ‚Üí SS)
/// 4Ô∏è‚É£    contains(where:) + –º–µ—Ç–æ–¥ –æ–±'—î–∫—Ç–∞ (input.contains) = —Å–∏–Ω—Ç–∞–∫—Å–∏—á–Ω–∞ –º–∞–≥—ñ—è
/// 5Ô∏è‚É£    Swift –¥–æ–∑–≤–æ–ª—è—î —Ñ—É–Ω–∫—Ü—ñ—è–º, –º–µ—Ç–æ–¥–∞–º, –∑–∞–º–∏–∫–∞–Ω–Ω—è–º –±—É—Ç–∏ –≤–∑–∞—î–º–æ–∑–∞–º—ñ–Ω–Ω–∏–º–∏, —â–æ –¥–∞—î –∑–º–æ–≥—É —Å—Ç–≤–æ—Ä—é–≤–∞—Ç–∏ –≤–∏—Ä–∞–∑–Ω–∏–π —ñ —Ä–æ–∑—à–∏—Ä—é–≤–∞–Ω–∏–π –∫–æ–¥

let password = "12345"
password.hasPrefix("123")
password.hasSuffix("345")

extension String {
    func deletingPrefix(_ prefix: String) -> String {
        guard self.hasPrefix(prefix) else { return self }
        return String(self.dropFirst(prefix.count))
    }
    
    func deletingSuffix(_ suffix: String) -> String {
        guard self.hasSuffix(suffix) else { return self }
        return String(self.dropLast(suffix.count))
    }
}

extension String {
    var capitalizedFirst: String {
        guard let firstLetter = self.first else { return "" }
        return firstLetter.uppercased() + self.dropFirst()
    }
}

// –ó–º—ñ–Ω–∞ —Ä–µ–≥—ñ—Å—Ç—Ä—É —Ä—è–¥–∫–∞
let weather = "it's going to rain"
print(weather.capitalized)

// –ú–µ—Ç–æ–¥–∏ contains() –ø—Ä–∞—Ü—é—é—Ç—å —ñ –¥–ª—è —Ä—è–¥–∫—ñ–≤, —ñ –¥–ª—è –º–∞—Å–∏–≤—ñ–≤
let input = "Swift is like Objective-C, without the C"
input.contains("Swift")                                 // ‚úÖ true

let languages = ["Python", "Ruby", "Swift"]
languages.contains("Swift")                             // ‚úÖ true

// –†—ñ—à–µ–Ω–Ω—è —á–µ—Ä–µ–∑ contains(where:):
languages.contains(where: input.contains(_:))           // ‚úÖ true

let label = UILabel()
label.frame = CGRect(x: 0, y: 0, width: 300, height: 200)
label.numberOfLines = 0

// –¢—É—Ç attributes ‚Äî —Å–ª–æ–≤–Ω–∏–∫, —è–∫–∏–π –æ–ø–∏—Å—É—î, —è–∫ –≤–∏–≥–ª—è–¥–∞—î —Ç–µ–∫—Å—Ç: –∫–æ–ª—ñ—Ä, —à—Ä–∏—Ñ—Ç, —Ñ–æ–Ω —Ç–æ—â–æ. –í—ñ–Ω –∑–∞—Å—Ç–æ—Å–æ–≤—É—î—Ç—å—Å—è –¥–æ –≤—Å—å–æ–≥–æ —Ä—è–¥–∫–∞.
let string = "This is a test string"
let attributes: [NSAttributedString.Key: Any] = [
    .foregroundColor: UIColor.white,
    .backgroundColor: UIColor.red,
    .font: UIFont.boldSystemFont(ofSize: 36)
]
let attributedString = NSAttributedString(string: string, attributes: attributes)


// –¢–∏ –∫–µ—Ä—É—î—à, –Ω–∞ —è–∫—ñ–π –¥—ñ–ª—è–Ω—Ü—ñ —Ä—è–¥–∫–∞ —è–∫–∏–π —Å—Ç–∏–ª—å –∑–∞—Å—Ç–æ—Å–æ–≤—É–≤–∞—Ç–∏. –£ –ø—Ä–∏–∫–ª–∞–¥—ñ ‚Äî –∫–æ–∂–Ω–µ —Å–ª–æ–≤–æ –º–∞—î —Å–≤—ñ–π —Ä–æ–∑–º—ñ—Ä —à—Ä–∏—Ñ—Ç—É.
let attributedSecondString = NSMutableAttributedString(string: string)

attributedSecondString.addAttribute(.font, value: UIFont.systemFont(ofSize: 8), range: NSRange(location: 0, length: 4))
attributedSecondString.addAttribute(.font, value: UIFont.systemFont(ofSize: 16), range: NSRange(location: 5, length: 2))
attributedSecondString.addAttribute(.font, value: UIFont.systemFont(ofSize: 24), range: NSRange(location: 8, length: 1))
attributedSecondString.addAttribute(.font, value: UIFont.systemFont(ofSize: 32), range: NSRange(location: 10, length: 4))
attributedSecondString.addAttribute(.link, value: URL(string: "https://apple.com")!, range: (string as NSString).range(of: "link"))


// MARK: - CHALLENGE PROJECT24 -
extension String {
    func withPrefix(_ prefix: String) -> String {
        // hasPrefix(_:) –ø–µ—Ä–µ–≤—ñ—Ä—è—î, —á–∏ —Ä—è–¥–æ–∫ –ø–æ—á–∏–Ω–∞—î—Ç—å—Å—è –∑ –ø—Ä–µ—Ñ—ñ–∫—Å–∞
        return self.hasPrefix(prefix) ? self : prefix + self
    }
}

var word = "pet"
print(word.withPrefix("car"))       //  –î–û–î–ê–ù–ù–Ø –ü–†–ï–§–Ü–ö–°–ê


// üîπ –ú–∞—î–º–æ —è–∫–∏–π—Å—å —Ä—è–¥–æ–∫: self (–±–æ –º–∏ –≤ extension String)
// üîπ –ü—Ä–æ–±—É—î–º–æ —Å—Ç–≤–æ—Ä–∏—Ç–∏ Double –∑ —Ü—å–æ–≥–æ —Ä—è–¥–∫–∞: Double(self)
// üîπ –Ø–∫—â–æ —Ü–µ –≤–¥–∞–ª–æ—Å—å ‚Äî –∑–Ω–∞—á–∏—Ç—å, —Ä—è–¥–æ–∫ —î —á–∏—Å–ª–æ–º
extension String {
    // –ü–ï–†–ï–í–Ü–†–ö–ê –ß–ò –†–Ø–î–û–ö –Ñ –ß–ò–°–õ–û–ú
    var isNumeric: Bool {
        return Double(self) != nil
    }
}

"123".isNumeric
"String".isNumeric


// components(separatedBy: "\n") ‚Äî —Ü–µ –º–µ—Ç–æ–¥, —è–∫–∏–π —Ä–æ–∑–±–∏–≤–∞—î —Ä—è–¥–æ–∫ –Ω–∞ —á–∞—Å—Ç–∏–Ω–∏, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é—á–∏ \n —è–∫ —Ä–æ–∑–¥—ñ–ª—å–Ω–∏–∫
extension String {
    var lines: [String] {
        // –†–û–ó–ë–ò–¢–¢–Ø –†–Ø–î–ö–ê –ù–ê –õ–Ü–ù–Ü–á
        return self.components(separatedBy: "\n")
    }
}

let text = "this\nis\na\ntest"
print(text.lines)

// string - —Ä—è–¥–æ–∫
// [String] - –º–∞—Å–∏–≤ —Ä—è–¥–∫—ñ–≤


// –°—Ç–≤–æ—Ä–∏ —Ä–æ–∑—à–∏—Ä–µ–Ω–Ω—è –¥–ª—è String, —è–∫–µ –¥–æ–¥–∞—î –≤–ª–∞—Å—Ç–∏–≤—ñ—Å—Ç—å isPalindrome, —â–æ –ø–æ–≤–µ—Ä—Ç–∞—î true, —è–∫—â–æ —Ä—è–¥–æ–∫ —á–∏—Ç–∞—î—Ç—å—Å—è –æ–¥–Ω–∞–∫–æ–≤–æ –∑–ª—ñ–≤–∞ –Ω–∞–ø—Ä–∞–≤–æ —ñ —Å–ø—Ä–∞–≤–∞ –Ω–∞–ª—ñ–≤–æ (–Ω–µ —á—É—Ç–ª–∏–≤–µ –¥–æ —Ä–µ–≥—ñ—Å—Ç—Ä—É).
extension String {
    var isPalindrome: Bool {
        let lowercased = self.lowercased()              // –ü–µ—Ä–µ–≤–µ—Å—Ç–∏ —Ä—è–¥–æ–∫ —É –Ω–∏–∂–Ω—ñ–π —Ä–µ–≥—ñ—Å—Ç—Ä
        let reversed = String(lowercased.reversed())    // –†–æ–∑–≤–µ—Ä–Ω—É—Ç–∏ —Ä—è–¥–æ–∫
        
        if lowercased == reversed {
            return true
        } else {
            return false
        }
    }
}

"racecar".isPalindrome
"RaceCar".isPalindrome
"hello".isPalindrome


// –°—Ç–≤–æ—Ä–∏ —Ä–æ–∑—à–∏—Ä–µ–Ω–Ω—è –¥–ª—è String, —è–∫–µ –¥–æ–¥–∞—î –≤–ª–∞—Å—Ç–∏–≤—ñ—Å—Ç—å trimmed, —â–æ –ø–æ–≤–µ—Ä—Ç–∞—î —Ä—è–¥–æ–∫ –±–µ–∑ –ø—Ä–æ–±—ñ–ª—ñ–≤ –Ω–∞ –ø–æ—á–∞—Ç–∫—É —Ç–∞ –≤ –∫—ñ–Ω—Ü—ñ.
extension String {
    var trimmed: String {
        return self.trimmingCharacters(in: .whitespacesAndNewlines)
    }
}

let messy = "   Hello, world! \n"
print(messy.trimmed)
