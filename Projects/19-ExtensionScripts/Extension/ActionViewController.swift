//
//  ActionViewController.swift
//  Extension
//
//  Created by mac on 18.06.2025.
//

import UIKit
import MobileCoreServices
import UniformTypeIdentifiers
import UniformTypeIdentifiers

class ActionViewController: UIViewController {
    
    // –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—è, –¥–µ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –º–æ–∂–µ –≤–≤–µ—Å—Ç–∏ –∞–±–æ –∑–º—ñ–Ω–∏—Ç–∏ JavaScript-–∫–æ–¥
    @IBOutlet var script: UITextView!
    
    // –ó–º—ñ–Ω–Ω—ñ –¥–ª—è –∑–±–µ—Ä—ñ–≥–∞–Ω–Ω—è –Ω–∞–∑–≤–∏ —Å—Ç–æ—Ä—ñ–Ω–∫–∏ —Ç–∞ URL, —è–∫—ñ –ø–µ—Ä–µ–¥–∞—é—Ç—å—Å—è –∑ Safari
    var pageTitle = ""
    var pageURL = ""
    
    var scripts: [Script] = []
    
    override func viewDidLoad() {
        super.viewDidLoad()
        
        // DONE –∫–Ω–æ–ø–∫–∞ —Å–ø—Ä–∞–≤–∞
        navigationItem.rightBarButtonItem = UIBarButtonItem(
            barButtonSystemItem: .done,
            target: self,
            action: #selector(done))
        
        // –ú–µ–Ω—é –∑ –¥–≤–æ–º–∞ –¥—ñ—è–º–∏: My scripts —Ç–∞ Bookmarks
        let menu = UIMenu(title: "", children: [
            UIAction(title: "üìú My scripts", image: UIImage(systemName: "doc.plaintext")) { [weak self] _ in
                self?.showMyScripts()
            },
            UIAction(title: "Basic scripts", image: UIImage(systemName: "list.bullet.rectangle")) { [weak self] _ in
                self?.chooseScript()
            }
        ])
        
        // –ö–Ω–æ–ø–∫–∞ –ª—ñ–≤–æ—Ä—É—á –∑ –º–µ–Ω—é
        navigationItem.leftBarButtonItem = UIBarButtonItem(
            image: UIImage(systemName: "ellipsis.circle"),
            menu: menu
        )
        
        loadScripts()
        
        // –û—Ç—Ä–∏–º—É—î–º–æ NotificationCenter, —è–∫–∏–π –Ω–∞–¥—Å–∏–ª–∞—î —Å–∏—Å—Ç–µ–º–Ω—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
        let notificationCenter = NotificationCenter.default
        
        // –ü—ñ–¥–ø–∏—Å—É—î–º–æ—Å—å –Ω–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –ó–ù–ò–ö–ù–ï–ù–ù–Ø –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∏
        notificationCenter.addObserver(self, selector: #selector(adjustForKeyboard), name: UIResponder.keyboardWillHideNotification, object: nil)
        
        // –ü—ñ–¥–ø–∏—Å—É—î–º–æ—Å—å –Ω–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –ó–ú–Ü–ù–£ —Ñ—Ä–µ–π–º—É –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∏
        notificationCenter.addObserver(self, selector: #selector(adjustForKeyboard), name: UIResponder.keyboardWillChangeFrameNotification, object: nil)
        
        // üì® –û—Ç—Ä–∏–º—É—î–º–æ –¥–∞–Ω—ñ, —è–∫—ñ –±—É–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω—ñ –∑ JavaScript —á–µ—Ä–µ–∑ Action.js
        if let inputItem = extensionContext?.inputItems.first as? NSExtensionItem {
            if let itemProvider = inputItem.attachments?.first {
                // –ß–∏—Ç–∞—î–º–æ —Å–ª–æ–≤–Ω–∏–∫ —Ç–∏–ø—É Property List (plist)
                itemProvider.loadItem(
                    forTypeIdentifier: UTType.propertyList.identifier,
                    options: nil
                ) { [weak self] (item, error) in
                    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —Ü–µ —Å–ª–æ–≤–Ω–∏–∫
                    guard let itemDictionary = item as? NSDictionary else { return }
                    
                    // –í–∏—Ç—è–≥—É—î–º–æ JavaScript-–ø–µ—Ä–µ–¥–∞–Ω—ñ –∑–Ω–∞—á–µ–Ω–Ω—è (title —Ç–∞ URL)
                    guard let javaScriptValues = itemDictionary[NSExtensionJavaScriptPreprocessingResultsKey] as? NSDictionary else { return }
                    
                    // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –¥–∞–Ω—ñ –≤ –ª–æ–∫–∞–ª—å–Ω—ñ –∑–º—ñ–Ω–Ω—ñ
                    self?.pageTitle = javaScriptValues["title"] as? String ?? ""
                    self?.pageURL = javaScriptValues["URL"] as? String ?? ""
                    
                    // –û–Ω–æ–≤–ª—é—î–º–æ —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å –Ω–∞ –≥–æ–ª–æ–≤–Ω–æ–º—É –ø–æ—Ç–æ—Ü—ñ
                    DispatchQueue.main.async {
                        self?.title = self?.pageTitle
                        print("‚úÖ Title: \(self?.pageTitle ?? "none")")
                        print("üåê URL: \(self?.pageURL ?? "none")")
                        
                        // –û—Ç—Ä–∏–º–∞–π –¥–æ–º–µ–Ω (host) –∑ URL —Å—Ç–æ—Ä—ñ–Ω–∫–∏ ‚Äî —Ü–µ –±—É–¥–µ –∫–ª—é—á –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è —ñ –∑—á–∏—Ç—É–≤–∞–Ω–Ω—è
                        if let host = self?.hostFromURL() {
                            // –û—Ç—Ä–∏–º–∞–π –¥–æ—Å—Ç—É–ø –¥–æ UserDefaults ‚Äî —Ü–µ –ª–æ–∫–∞–ª—å–Ω–µ —Å—Ö–æ–≤–∏—â–µ –¥–ª—è –ø—Ä–æ—Å—Ç–∏—Ö –¥–∞–Ω–∏—Ö –Ω–∞ –ø—Ä–∏—Å—Ç—Ä–æ—ó.
                            let defaults = UserDefaults.standard
                            
                            // –°–ø—Ä–æ–±—É–π –æ—Ç—Ä–∏–º–∞—Ç–∏ –∑–Ω–∞—á–µ–Ω–Ω—è –∑ UserDefaults –∑–∞ —Ü–∏–º –∫–ª—é—á–µ–º:
                            // –Ø–∫—â–æ –≤–æ–Ω–æ —î ‚Äî —Ü–µ –∑–±–µ—Ä–µ–∂–µ–Ω–∏–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è —Ü—å–æ–≥–æ —Å–∞–π—Ç—É.
                            // –Ø–∫—â–æ –∑–Ω–∞—á–µ–Ω–Ω—è –Ω–µ–º–∞—î ‚Äî —Ü–µ –æ–∑–Ω–∞—á–∞—î, —â–æ —Å–∫—Ä–∏–ø—Ç —â–µ –Ω–µ –∑–±–µ—Ä–µ–∂–µ–Ω–∏–π –¥–ª—è —Ü—å–æ–≥–æ —Å–∞–π—Ç—É.
                            if let savedScript = defaults.string(forKey: host) {
                                self?.script.text = savedScript
                                print("üì• Script loaded for \(host)")
                            } else {
                                print("üì≠ No saved script for \(host)")
                            }
                        }
                    }
                }
            }
        }
    }

    // üßæ –ú–µ—Ç–æ–¥, —è–∫–∏–π –≤–∏–∫–ª–∏–∫–∞—î—Ç—å—Å—è –ø—Ä–∏ –Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—ñ –∫–Ω–æ–ø–∫–∏ "–ì–æ—Ç–æ–≤–æ"
    @objc func done() {
        // –°—Ç–≤–æ—Ä—é—î–º–æ –Ω–æ–≤–∏–π –µ–ª–µ–º–µ–Ω—Ç —Ä–æ–∑—à–∏—Ä–µ–Ω–Ω—è
        let item = NSExtensionItem()
        
        // –°—Ç–≤–æ—Ä—é—î–º–æ —Å–ª–æ–≤–Ω–∏–∫ –∑ –∫–ª—é—á–µ–º "customJavaScript" —ñ —Ç–µ–∫—Å—Ç–æ–º –∑ UITextView
        let argument: NSDictionary = ["customJavaScript": script.text ?? ""]
        
        // –û–±–µ—Ä—Ç–∞—î–º–æ –Ω–∞—à —Å–ª–æ–≤–Ω–∏–∫ —É —â–µ –æ–¥–∏–Ω, —ñ–∑ —Å–ø–µ—Ü—ñ–∞–ª—å–Ω–∏–º –∫–ª—é—á–µ–º, –æ—á—ñ–∫—É–≤–∞–Ω–∏–º —Å–∏—Å—Ç–µ–º–æ—é
        let webDictionary: NSDictionary = [NSExtensionJavaScriptFinalizeArgumentKey: argument]
        
        // –û–±–µ—Ä—Ç–∞—î–º–æ –≤—Å–µ —É NSItemProvider –∑ –ø—Ä–∞–≤–∏–ª—å–Ω–∏–º —Ç–∏–ø–æ–º
        let customJavaScript = NSItemProvider(item: webDictionary, typeIdentifier: UTType.propertyList.identifier)
        
        // –ü—Ä–∏–∑–Ω–∞—á–∞—î–º–æ —è–∫ –≤–∫–ª–∞–¥–µ–Ω–Ω—è –¥–æ —Ä–æ–∑—à–∏—Ä–µ–Ω–Ω—è
        item.attachments = [customJavaScript]
        
        save()
        
        // –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç Safari, —â–æ–± –≤—ñ–Ω –º—ñ–≥ –æ–±—Ä–æ–±–∏—Ç–∏ –∑–º—ñ–Ω–µ–Ω–∏–π JavaScript
        extensionContext?.completeRequest(returningItems: [item])
    }
    
    
    @objc func chooseScript() {
        let ac = UIAlertController(title: "Available basic scripts ‚ú®", message: "Choose one of them.", preferredStyle: .actionSheet)
        
        // Script: "–ü–æ–∫–∞–∑–∞—Ç–∏ –≤—Å—ñ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è"
        ac.addAction(UIAlertAction(title: "Show all images", style: .default, handler: { [weak self] _ in
            self?.script.text = """
            var imgs = document.images;
            for (var i = 0; i < imgs.length; i++) {
                console.log(imgs[i].src);
            } 
            """
        }))
        
        // Script: "–ó–º—ñ–Ω–∏—Ç–∏ —Ñ–æ–Ω –Ω–∞ —á–æ—Ä–Ω–∏–π"
        ac.addAction(UIAlertAction(title: "Change the background to black", style: .default, handler: { [weak self] _ in
            self?.script.text = """
            document.body.style.backgroundColor = "black";
            """
        }))
        
        // Script: "–ó–º—ñ–Ω–∏—Ç–∏ –≤—Å—ñ –∑–∞–≥–æ–ª–æ–≤–∫–∏ h1 –Ω–∞ —á–µ—Ä–≤–æ–Ω–∏–π"
        ac.addAction(UIAlertAction(title: "Change all h1 headings to red", style: .default, handler: { [weak self] _ in
            self?.script.text = """
            var headers = document.getElementsByTagName("h1");
            for (var i = 0; i < headers.length; i++) {
                headers[i].style.color = "red";
            }
            """
        }))
        
        // Script: "–í–∏–¥—ñ–ª–∏—Ç–∏ –≤—Å—ñ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –∂–æ–≤—Ç–∏–º"
        ac.addAction(UIAlertAction(title: "Highlight all links in yellow", style: .default, handler: { [weak self] _ in
            self?.script.text = """
            var links = document.getElementsByTagName("a");
            for (var i = 0; i < links.length; i++) {
                links[i].style.backgroundColor = "yellow";
            }
            """
        }))
        
        ac.addAction(UIAlertAction(title: "Cancel", style: .cancel))
        
        present(ac, animated: true)
    }
                             
    
    // –¶–µ –º–µ—Ç–æ–¥, —è–∫–∏–π –≤–∏–∫–ª–∏–∫–∞—î—Ç—å—Å—è, –∫–æ–ª–∏ —Ç–∏ –Ω–∞—Ç–∏—Å–∫–∞—î—à –∫–Ω–æ–ø–∫—É "üìú My Scripts"
    @objc func showMyScripts() {
        let vc = MyScriptsViewController()
        
        // üîπ –ü–µ—Ä–µ–¥–∞—î—à –ø–æ—Ç–æ—á–Ω–∏–π —Å–ø–∏—Å–æ–∫ —Å–∫—Ä–∏–ø—Ç—ñ–≤
            vc.scripts = scripts
            vc.onSelectScript = { [weak self] selectedScript in
                self?.script.text = selectedScript.code
            }
        
        // üîπ –¶–µ –∑–∞–º–∏–∫–∞–Ω–Ω—è (closure), —è–∫–µ —Å–ø—Ä–∞—Ü—å–æ–≤—É—î, –∫–æ–ª–∏ –≤ MyScriptsViewController –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –≤–∏–±—Ä–∞–≤ —Å–∫—Ä–∏–ø—Ç.
        // üîπ –í–æ–Ω–æ –±–µ—Ä–µ selectedScript.code —ñ –≤—Å—Ç–∞–≤–ª—è—î –π–æ–≥–æ —É –≥–æ–ª–æ–≤–Ω–µ —Ç–µ–∫—Å—Ç–æ–≤–µ –ø–æ–ª–µ (UITextView)
            vc.onScriptsChanged = { [weak self] updatedScripts in
                self?.scripts = updatedScripts
                self?.saveScripts() // –ø—Ä–∞–≤–∏–ª—å–Ω–∞ –Ω–∞–∑–≤–∞ –º–∞—î –±—É—Ç–∏ saveScripts
            }
        
        // üîπ –°—Ç–≤–æ—Ä—é—î—à –Ω–∞–≤—ñ–≥–∞—Ü—ñ–π–Ω–∏–π –∫–æ–Ω—Ç—Ä–æ–ª–µ—Ä, —è–∫–∏–π –º—ñ—Å—Ç–∏—Ç—å MyScriptsViewController.
        // üîπ –¶–µ –ø–æ—Ç—Ä—ñ–±–Ω–æ, —â–æ–±–∏ –≤—Å–µ—Ä–µ–¥–∏–Ω—ñ –Ω–æ–≤–æ–≥–æ –µ–∫—Ä–∞–Ω—É –º–æ–≥–ª–∏ –ø—Ä–∞—Ü—é–≤–∞—Ç–∏ –∫–Ω–æ–ø–∫–∏ –≤–≥–æ—Ä—ñ (add, cancel) ‚Äî –±–µ–∑ UINavigationController –≤–æ–Ω–∏ –Ω–µ –≤—ñ–¥–æ–±—Ä–∞–∂–∞–ª–∏—Å—å –±–∏.
            let nav = UINavigationController(rootViewController: vc)
            present(nav, animated: true)
    }
                             
    
    // –§—É–Ω–∫—Ü—ñ—è, —â–æ –∫–æ—Ä–∏–≥—É—î —Ç–µ–∫—Å—Ç–æ–≤–µ –ø–æ–ª–µ –ø—Ä–∏ –ø–æ—è–≤—ñ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∏:
    @objc func adjustForKeyboard(notification: Notification) {
        // –í–∏—Ç—è–≥—É—î–º–æ —Ä–æ–∑–º—ñ—Ä –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∏ –∑ userInfo
        guard let keyboardValue = notification.userInfo?[UIResponder.keyboardFrameEndUserInfoKey] as? NSValue else { return }
        
        // –ü–µ—Ä–µ—Ç–≤–æ—Ä—é—î–º–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∏ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∏ —É —Å–∏—Å—Ç–µ–º—É –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –Ω–∞—à–æ–≥–æ View
        let keyboardScreenEndFrame = keyboardValue.cgRectValue
        let keyboardViewEndFrame = view.convert(keyboardScreenEndFrame, from: view.window)
        
        // –Ø–∫—â–æ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∞ –ó–ù–ò–ö–ê–Ñ ‚Äì –ø—Ä–∏–±–∏—Ä–∞—î–º–æ –≤—ñ–¥—Å—Ç—É–ø–∏
        if notification.name == UIResponder.keyboardWillHideNotification {
            // –Ø–∫—â–æ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∞ —Ö–æ–≤–∞—î—Ç—å—Å—è ‚Äî –ø—Ä–∏–±–∏—Ä–∞—î–º–æ –≤—ñ–¥—Å—Ç—É–ø–∏
            script.contentInset = .zero
        } else {
            // –Ü–Ω–∞–∫—à–µ ‚Äî –¥–æ–¥–∞—î–º–æ –≤—ñ–¥—Å—Ç—É–ø –∑–Ω–∏–∑—É –Ω–∞ –≤–∏—Å–æ—Ç—É –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∏
            // –º—ñ–Ω—É—Å –±–µ–∑–ø–µ—á–Ω–∞ –∑–æ–Ω–∞ (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, —è–∫—â–æ —î –∂–µ—Å—Ç–æ–≤–∞ –ø–∞–Ω–µ–ª—å –Ω–∞ iPhone)
            script.contentInset = UIEdgeInsets(top: 0, left: 0, bottom: keyboardViewEndFrame.height - view.safeAreaInsets.bottom, right: 0)
        }
        
        // –†–æ–±–∏–º–æ —Ç–µ —Å–∞–º–µ –¥–ª—è —Å–º—É–≥–∏ –ø—Ä–æ–∫—Ä—É—Ç–∫–∏
        script.scrollIndicatorInsets = script.contentInset
        
        // –ü—Ä–æ–∫—Ä—É—á—É—î–º–æ —Ç–µ–∫—Å—Ç —Ç–∞–∫, —â–æ–± –∫—É—Ä—Å–æ—Ä –±—É–≤ —É –ø–æ–ª—ñ –∑–æ—Ä—É
        let selectedRange = script.selectedRange
        script.scrollRangeToVisible(selectedRange)
    }
    
    // –ú–µ—Ç–æ–¥ –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–æ–º–µ–Ω—É (host) –∑ URL —Å—Ç–æ—Ä—ñ–Ω–∫–∏ ‚Äî –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è —è–∫ –∫–ª—é—á —É UserDefaults
    func hostFromURL() -> String? {
        guard let url = URL(string: pageURL) else { return nil }
        return url.host
    }
    
    // –ú–µ—Ç–æ–¥ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è —Ç–µ–∫—Å—Ç—É —Å–∫—Ä–∏–ø—Ç–∞ –≤ UserDefaults –∑–∞ –∫–ª—é—á–µ–º –¥–æ–º–µ–Ω—É —Å—Ç–æ—Ä—ñ–Ω–∫–∏
    func save() {
        if let host = hostFromURL() {
            let defaults = UserDefaults.standard
            defaults.set(script.text, forKey: host)
            print("üì§ Script saved for \(host)")
        }
    }
    
    func loadScripts() {
        let defaults = UserDefaults.standard
        
        // –¥—ñ—Å—Ç–∞—î—à Data –∑ UserDefaults
        if let savedOwnScripts = defaults.object(forKey: "scripts") as? Data {
            let jsonDecoder = JSONDecoder()
            
            do {
                // –î–µ–∫–æ–¥—É—î–º–æ –º–∞—Å–∏–≤ —Å–∫—Ä–∏–ø—Ç—ñ–≤
                scripts = try jsonDecoder.decode([Script].self, from: savedOwnScripts)
            } catch {
                print("‚ùå Failed to load scripts: \(error.localizedDescription)")
            }
        }
    }
    
    func saveScripts() {
        let jsonEncoder = JSONEncoder()
        
        if let savedData = try? jsonEncoder.encode(scripts) {
            let defaults = UserDefaults.standard
            defaults.set(savedData, forKey: "scripts")
        } else {
            print("‚ùå Failed to save scripts.")
        }
    }
    
    func stackedButtons() -> UIView {
        let stack = UIStackView()
        stack.axis = .vertical
        stack.spacing = 4

        let scriptsButton = UIButton(type: .system)
        scriptsButton.setTitle("üìú My scripts", for: .normal)
        scriptsButton.addTarget(self, action: #selector(showMyScripts), for: .touchUpInside)

        let doneButton = UIButton(type: .system)
        doneButton.setTitle("Done", for: .normal)
        doneButton.addTarget(self, action: #selector(done), for: .touchUpInside)

        stack.addArrangedSubview(scriptsButton)
        stack.addArrangedSubview(doneButton)

        return stack
    }
}
