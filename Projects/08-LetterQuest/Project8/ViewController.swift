
//  Project8 chalange
//
//  Created by mac on 09.04.2025.
//

import UIKit

class ViewController: UIViewController {
    var cluesLabel: UILabel!            // –ú—ñ—Ç–∫–∞ –¥–ª—è –ø—ñ–¥–∫–∞–∑–æ–∫ (1. Ghosts in residence)
    var answersLabel: UILabel!          // –ú—ñ—Ç–∫–∞ –¥–ª—è –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥: 6 letters)
    var currentAnswer: UITextField!     // –ü–æ–ª–µ, –∫—É–¥–∏ –≤–≤–æ–¥–∏—Ç—å—Å—è –ø–æ—Ç–æ—á–Ω–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å
    var scoreLabel: UILabel!            // –ú—ñ—Ç–∫–∞ –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è —Ä–∞—Ö—É–Ω–∫—É –≥—Ä–∞–≤—Ü—è
    
    var letterButtons = [UIButton]()    // –ú–∞—Å–∏–≤ —É—Å—ñ—Ö –∫–Ω–æ–ø–æ–∫ —ñ–∑ –ª—ñ—Ç–µ—Ä–∞–º–∏
    var activatedButtons = [UIButton]() // –ú–∞—Å–∏–≤ –∫–Ω–æ–ø–æ–∫, —è–∫—ñ –≤–∂–µ –±—É–ª–∏ –Ω–∞—Ç–∏—Å–Ω—É—Ç—ñ
    
    var solutions = [String]()          // –ú–∞—Å–∏–≤ –ø—Ä–∞–≤–∏–ª—å–Ω–∏—Ö –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π (–±–µ–∑ '|')
    
    var score = 0 {
        didSet {
            scoreLabel.text = "Score: \(score)"
        }
    }
    var level = 1
    
    override func loadView() {
        view = UIView()
        view.backgroundColor = .white
        
        scoreLabel = UILabel()
        // –Ω–µ –ø–µ—Ä–µ—Ç–≤–æ—Ä—é—î –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ —Ä–æ–∑–º—ñ—Ä–∏ —Ç–∞ –ø–æ–∑–∏—Ü—ñ—é –º—ñ—Ç–∫–∏ —É frame.
        scoreLabel.translatesAutoresizingMaskIntoConstraints = false
        scoreLabel.textAlignment = .right
        scoreLabel.text = "Score 0"
        // –¥–æ–¥–∞—î –º—ñ—Ç–∫—É –¥–æ —ñ—î—Ä–∞—Ä—Ö—ñ—ó view'—à–æ–∫ (–Ω–∞ –µ–∫—Ä–∞–Ω—ñ).
        view.addSubview(scoreLabel)
        
        cluesLabel = UILabel()
        cluesLabel.translatesAutoresizingMaskIntoConstraints = false
        cluesLabel.font = UIFont.systemFont(ofSize: 24)
        cluesLabel.text = "CLUES"
        cluesLabel.numberOfLines = 0
        cluesLabel.setContentHuggingPriority(UILayoutPriority(1), for: .vertical)
        view .addSubview(cluesLabel)
        
        answersLabel = UILabel()
        answersLabel.translatesAutoresizingMaskIntoConstraints = false
        answersLabel.font = UIFont.systemFont(ofSize: 24)
        answersLabel.text = "ANSWEARS"
        answersLabel.textAlignment = .right
        answersLabel.numberOfLines = 0
        cluesLabel.setContentHuggingPriority(UILayoutPriority(1), for: .vertical)
        view.addSubview(answersLabel)
        
        currentAnswer = UITextField()
        currentAnswer.translatesAutoresizingMaskIntoConstraints = false
        currentAnswer.placeholder = "Tap letters to guess"
        currentAnswer.textAlignment = .center
        currentAnswer.font = UIFont.systemFont(ofSize: 40)
        currentAnswer.isUserInteractionEnabled = false
        view.addSubview(currentAnswer)
        
        let submit = UIButton(type: .system  )
        submit.translatesAutoresizingMaskIntoConstraints = false
        submit.setTitle("SUBMIT", for: .normal)
        submit.addTarget(self, action: #selector(submitTapped), for: .touchUpInside)
        view.addSubview(submit)
        
        let clear = UIButton(type: .system)
        clear.translatesAutoresizingMaskIntoConstraints = false
        clear.setTitle("CLEAR", for: .normal)
        clear.addTarget(self, action: #selector(clearTapped), for: .touchUpInside)
        view.addSubview(clear)
        
        let buttonsView = UIView()
        buttonsView.translatesAutoresizingMaskIntoConstraints = false
        view.addSubview(buttonsView)
        
        
        cluesLabel.setContentCompressionResistancePriority(.required, for: .vertical)
        answersLabel.setContentCompressionResistancePriority(.required, for: .vertical)
        
        // –¶–µ–π –º–µ—Ç–æ–¥ –∞–∫—Ç–∏–≤—É—î Auto Layout –æ–±–º–µ–∂–µ–Ω–Ω—è
        NSLayoutConstraint.activate([
            scoreLabel.topAnchor.constraint(equalTo: view.layoutMarginsGuide.topAnchor),
            scoreLabel.trailingAnchor.constraint(equalTo: view.layoutMarginsGuide.trailingAnchor, constant: 0),
            
            // üîΩ –†–æ–∑–º—ñ—Å—Ç–∏—Ç–∏ cluesLabel –æ–¥—Ä–∞–∑—É –ø—ñ–¥ scoreLabel (–ø–æ –≤–µ—Ä—Ç–∏–∫–∞–ª—ñ).
            cluesLabel.topAnchor.constraint(equalTo: scoreLabel.bottomAnchor),
            
            // ‚¨ÖÔ∏è –í—Å—Ç–∞–Ω–æ–≤–∏—Ç–∏ –≤—ñ–¥—Å—Ç—É–ø 100 –ø—ñ–∫—Å–µ–ª—ñ–≤ –≤—ñ–¥ –ª—ñ–≤–æ–≥–æ –∫—Ä–∞—é –µ–∫—Ä–∞–Ω–∞ (–∑ —É—Ä–∞—Ö—É–≤–∞–Ω–Ω—è–º layoutMargins).
            cluesLabel.leadingAnchor.constraint(equalTo: view.layoutMarginsGuide.leadingAnchor, constant: 100),
            
            // üìè –ó–∞–¥–∞—Ç–∏ —à–∏—Ä–∏–Ω—É cluesLabel —è–∫ 60% –≤—ñ–¥ —à–∏—Ä–∏–Ω–∏ –µ–∫—Ä–∞–Ω–∞ (layoutMargins) –º—ñ–Ω—É—Å 100 –ø—ñ–∫—Å–µ–ª—ñ–≤.
            cluesLabel.widthAnchor.constraint(equalTo: view.layoutMarginsGuide.widthAnchor, multiplier: 0.6, constant: -100),
            
            // // üìå –ü—Ä–∏–≤‚Äô—è–∑—É—î –≤–µ—Ä—Ö–Ω—ñ–π –∫—Ä–∞–π answersLabel –¥–æ –Ω–∏–∂–Ω—å–æ–≥–æ –∫—Ä–∞—é scoreLabel ‚Äî —Ç–æ–±—Ç–æ —Ä–æ–∑–º—ñ—â—É—î—Ç—å—Å—è –Ω–∏–∂—á–µ –∑–∞ "–†–∞—Ö—É–Ω–æ–∫".
            answersLabel.topAnchor.constraint(equalTo: scoreLabel.bottomAnchor),
            
            // üìå –ü—Ä–∏–≤‚Äô—è–∑—É—î –ø—Ä–∞–≤–∏–π –∫—Ä–∞–π answersLabel –¥–æ –ø—Ä–∞–≤–æ–≥–æ –∫—Ä–∞—é –≤—ñ–∫–Ω–∞ (–∑ —É—Ä–∞—Ö—É–≤–∞–Ω–Ω—è–º –≤—ñ–¥—Å—Ç—É–ø—ñ–≤),
            // —ñ–∑ –≤—ñ–¥—Å—Ç—É–ø–æ–º 100 –ø—ñ–∫—Å–µ–ª—ñ–≤ –≤–ª—ñ–≤–æ (—Ç–æ–º—É -100).
            answersLabel.trailingAnchor.constraint(equalTo: view.layoutMarginsGuide.trailingAnchor, constant: -100),
            
            // üìå –®–∏—Ä–∏–Ω–∞ answersLabel –±—É–¥–µ 40% –≤—ñ–¥ —à–∏—Ä–∏–Ω–∏ –≤—ñ–∫–Ω–∞ (–∑ —É—Ä–∞—Ö—É–≤–∞–Ω–Ω—è–º –≤—ñ–¥—Å—Ç—É–ø—ñ–≤), —ñ —â–µ –º—ñ–Ω—É—Å 100 –ø—ñ–∫—Å–µ–ª—ñ–≤.
            answersLabel.widthAnchor.constraint(equalTo: view.layoutMarginsGuide.widthAnchor, multiplier: 0.4, constant: -100),
            
            // üìå –í–∏—Å–æ—Ç–∞ answersLabel –±—É–¥–µ —Ç–∞–∫–∞ –∂, —è–∫ —É cluesLabel ‚Äî —â–æ–± –≤–æ–Ω–∏ –≤–∏–≥–ª—è–¥–∞–ª–∏ —Å–∏–º–µ—Ç—Ä–∏—á–Ω–æ.
            answersLabel.heightAnchor.constraint(equalTo: cluesLabel.heightAnchor),
            
            currentAnswer.centerXAnchor.constraint(equalTo: view.centerXAnchor),
            currentAnswer.widthAnchor.constraint(equalTo: view.widthAnchor, multiplier: 0.5),
            currentAnswer.topAnchor.constraint(equalTo: cluesLabel.bottomAnchor, constant: 20),
            
            submit.topAnchor.constraint(equalTo: currentAnswer.bottomAnchor),
            submit.centerXAnchor.constraint(equalTo: view.centerXAnchor, constant: -100),
            submit.centerYAnchor.constraint(equalTo: view.centerYAnchor, constant: 20),
            submit.heightAnchor.constraint(equalToConstant: 44),
            
            clear.centerXAnchor.constraint(equalTo: view.centerXAnchor, constant: 100),
            clear.centerYAnchor.constraint(equalTo: submit.centerYAnchor),
            clear.heightAnchor.constraint(equalToConstant: 44),
            
            // –≤–∏—Ä—ñ–≤–Ω—è–Ω–µ –ø–æ–ª–µ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–æ –ø–æ —Ü–µ–Ω—Ç—Ä—É
            buttonsView.centerXAnchor.constraint(equalTo: view.centerXAnchor),
            
            // –Ü—Å–Ω—É—é—á—ñ constraints
            buttonsView.widthAnchor.constraint(equalToConstant: 760),
            buttonsView.centerXAnchor.constraint(equalTo: view.centerXAnchor),
            buttonsView.topAnchor.constraint(equalTo: submit.bottomAnchor, constant: 10),
            buttonsView.bottomAnchor.constraint(equalTo: view.safeAreaLayoutGuide.bottomAnchor, constant: -20),
        ])
        
        let width = 150
        let height = 70
        
        for row in 0..<4 {
            for column in 0..<5 {
                let letterButton = UIButton(type: .system)
                letterButton.titleLabel?.font = UIFont.systemFont(ofSize: 36)
                letterButton.setTitle("WWW", for: .normal)
                letterButton.addTarget(self, action: #selector(letterTapped), for: .touchUpInside)
                
                let frame = CGRect(x: column * width, y: row * height, width: width, height: height)
                letterButton.frame = frame
                
                buttonsView.addSubview(letterButton)
                letterButtons.append(letterButton)
            }
            
            // –°—Ç–≤–æ—Ä–∏–ª–∏ ‚Äú—Å—ñ—Ç–∫—É‚Äù, —è–∫–∞ –≤—ñ–¥–æ–±—Ä–∞–∂–∞—î –∫–æ–Ω—Ç—É—Ä–∏ –∫–æ–∂–Ω–æ—ó –∫–Ω–æ–ø–∫–∏
            for letterButton in letterButtons {
                letterButton.layer.borderWidth = 1          // —Ç–æ–Ω–∫–∞ –ª—ñ–Ω—ñ—è
                letterButton.layer.borderColor = UIColor.gray.cgColor
                letterButton.layer.cornerRadius = 5         // –∑–∞–æ–∫—Ä—É–≥–ª–µ–Ω–Ω—è –∫—É—Ç–æ—á–∫—ñ–≤
            }
        }
    }
    
    override func viewDidLoad() {
        super.viewDidLoad()
        
        DispatchQueue.main.async {
            self.loadLevel()
        }
    }
    
    @objc func letterTapped(_ sender: UIButton) {
        // –û—Ç—Ä–∏–º—É—î —Ç–µ–∫—Å—Ç –∑ –∫–Ω–æ–ø–∫–∏ (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, "HA"), —ñ–Ω–∞–∫—à–µ - –≤–∏—Ö—ñ–¥ –∑ —Ñ—É–Ω—Ü—ñ—ó
        guard let buttonTitle = sender.titleLabel?.text else { return }
        
        // –î–æ–¥–∞—î —Ü–µ–π —Ñ—Ä–∞–≥–º–µ–Ω—Ç –¥–æ –ø–æ–ª—è –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ
        currentAnswer.text = currentAnswer.text?.appending(buttonTitle)
        // –ó–±–µ—Ä—ñ–≥–∞—î –Ω–∞—Ç–∏—Å–Ω—É—Ç—É –∫–Ω–æ–ø–∫—É —É –º–∞—Å–∏–≤, —â–æ–± –ø–æ—Ç—ñ–º –∑–Ω–∞—Ç–∏, —è–∫—ñ —Å–∞–º–µ –Ω–∞—Ç–∏—Å–Ω—É–ª–∏
        activatedButtons.append(sender)
        sender.isHidden = true
    }
    
    @objc func submitTapped(_ sender: UIButton) {
        // –û—Ç—Ä–∏–º—É—î –≤—ñ–¥–ø–æ–≤—ñ–¥—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞.
        guard let answerText = currentAnswer.text else { return }
        
        // –®—É–∫–∞—î, —á–∏ —Ü—è –≤—ñ–¥–ø–æ–≤—ñ–¥—å —î —Å–µ—Ä–µ–¥ –ø—Ä–∞–≤–∏–ª—å–Ω–∏—Ö (solutions).
        // –Ø–∫—â–æ —Ç–∞–∫ ‚Äî –æ—Ç—Ä–∏–º—É—î —ó—ó –ø–æ–∑–∏—Ü—ñ—é.
            if let solutionPosition = solutions.firstIndex(of: answerText) {
            activatedButtons.removeAll()
            
            // –†–æ–∑–±–∏–≤–∞—î —Ç–µ–∫—Å—Ç –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π –ø–æ —Ä—è–¥–∫–∞—Ö.
            var splitAnswers = answersLabel.text?.components(separatedBy: "\n")
            // –ó–∞–º—ñ–Ω—é—î –≤—ñ–¥–ø–æ–≤—ñ–¥—å –Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω—É –≤ –ø–æ—Ç—Ä—ñ–±–Ω–æ–º—É –º—ñ—Å—Ü—ñ.
            splitAnswers?[solutionPosition] = answerText
            // –û–±'—î–¥–Ω—É—î –Ω–∞–∑–∞–¥ —É —Ä—è–¥–æ–∫ —ñ –ø–æ–∫–∞–∑—É—î –≤ answearsLabel.
            answersLabel.text = splitAnswers?.joined(separator: "\n")
            
                currentAnswer.text = ""
                score += 1
                scoreLabel.text = "Score: \(score)"
                
                // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —á–∏ –≤—Å—ñ –∫–Ω–æ–ø–∫–∏ –≤ letterButtons —î –ø—Ä–∏—Ö–æ–≤–∞–Ω—ñ.
                let allButtonsHiden = letterButtons.allSatisfy { $0.isHidden }
                if  allButtonsHiden {
                    let ac = UIAlertController(title: "Well done!", message: "Are you ready for the next level?", preferredStyle: .alert)
                    ac.addAction(UIAlertAction(title: "Let's go!", style: .default, handler: levelUp))
                    present(ac, animated: true)
                }
            } else {
                score -= 1
                scoreLabel.text = "Score: \(score)"
                
                // –ü–æ–∫–∞–∑—É—î–º–æ –∑–Ω–æ–≤—É –≤—Å—ñ –Ω–∞—Ç–∏—Å–Ω—É—Ç—ñ –∫–Ω–æ–ø–∫–∏
                for button in activatedButtons {
                    button.isHidden = false
                }
            
            // –û—á–∏—â–∞—î–º–æ –º–∞—Å–∏–≤ –∞–∫—Ç–∏–≤–æ–≤–∞–Ω–∏—Ö –∫–Ω–æ–ø–æ–∫
            activatedButtons.removeAll()
            
            // –û—á–∏—â–∞—î–º–æ –≤–≤–µ–¥–µ–Ω–∏–π —Ç–µ–∫—Å—Ç
            currentAnswer.text = ""
            
            // // –ü–æ–∫–∞–∑—É—î–º–æ –∞–ª–µ—Ä—Ç –ø—Ä–æ –ø–æ–º–∏–ª–∫—É
            let alert = UIAlertController(title: "Your word is incorrect.", message: "Don't be upset, try again!", preferredStyle: .alert)
            alert.addAction(UIAlertAction(title: "OK", style: .default))
            present(alert, animated: true)
        }
    }
    
    
    func levelUp(action: UIAlertAction) {
        level += 1
        
        // –û—á–∏—â–∞—î —Å–ø–∏—Å–æ–∫ –ø—Ä–∞–≤–∏–ª—å–Ω–∏—Ö –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π.
        solutions.removeAll(keepingCapacity: true) //  –∑–∞–ª–∏—à–∞—î –≤–∏–¥—ñ–ª–µ–Ω—É –ø–∞–º'—è—Ç—å (–æ–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—è, –Ω–µ —Å—Ç–≤–æ—Ä—é—î –Ω–æ–≤–∏–π –º–∞—Å–∏–≤).
        
        cluesLabel.text = ""
        answersLabel.text = ""
        currentAnswer.text = ""
        
        loadLevel()
        
        // –ü–æ–∫–∞–∑—É—î –≤—Å—ñ –∫–Ω–æ–ø–∫–∏ –∑ –ª—ñ—Ç–µ—Ä–∞–º–∏ –∑–∞–Ω–æ–≤–æ (–±–æ –¥–µ—è–∫—ñ –±—É–ª–∏ —Å—Ö–æ–≤–∞–Ω—ñ –ø—ñ—Å–ª—è –Ω–∞—Ç–∏—Å–∫–∞–Ω—å)
        for button in letterButtons {
            button.isHidden = false
        }
        
    }
    
    @objc func clearTapped(_ sender: UIButton) {
        // –û—á–∏—â–∞—î –ø–æ–ª–µ –∑ –≤—ñ–¥–ø–æ–≤—ñ–¥–¥—é (–ø—Ä–∏–±–∏—Ä–∞—î –≤—Å—ñ –±—É–∫–≤–∏)
        currentAnswer.text = ""
        
        // –ü–æ–≤–µ—Ä—Ç–∞—î –Ω–∞ –µ–∫—Ä–∞–Ω —É—Å—ñ –Ω–∞—Ç–∏—Å–Ω—É—Ç—ñ –∫–Ω–æ–ø–∫–∏.
        for button in activatedButtons {
            button.isHidden = false
        }
        
        // –û—á–∏—â–∞—î —Å–ø–∏—Å–æ–∫ –Ω–∞—Ç–∏—Å–Ω—É—Ç–∏—Ö –∫–Ω–æ–ø–æ–∫.
        activatedButtons.removeAll()
    }
    
    func loadLevel() {
        DispatchQueue.global(qos: .utility).async {
            [weak self] in
            
            guard let self = self else { return }
            
            var clueString = "" // —Ç–µ–∫—Å—Ç —É—Å—ñ—Ö –ø—ñ–¥–∫–∞–∑–æ–∫
            var solutionsString = "" // —Ç–µ–∫—Å—Ç —ñ–∑ –∫—ñ–ª—å–∫—ñ—Å—Ç—é –±—É–∫–≤ –¥–ª—è –∫–æ–∂–Ω–æ—ó –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ
            var letterBits = [String]() // —à–º–∞—Ç–æ—á–∫–∏ —Å–ª—ñ–≤ (–±—É–¥—É—Ç—å –∫–Ω–æ–ø–∫–∏, —è–∫—ñ —Ç—Ä–µ–±–∞ –Ω–∞—Ç–∏—Å–∫–∞—Ç–∏)
            
            // –®—É–∫–∞—î–º–æ —Ñ–∞–π–ª level*.txt –≤ —Ä–µ—Å—É—Ä—Å–∞—Ö:
            if let levelFileURL = Bundle.main.url(forResource: "level\(level)", withExtension: "txt") {
                // if let levelContents = try? String(contentsOf: levelFileURL)
                if let levelContents = try? String(contentsOf: levelFileURL, encoding: .utf8) {
                    
                    // –†–æ–∑–±–∏–≤–∞—î–º–æ —Ñ–∞–π–ª –Ω–∞ —Ä—è–¥–∫–∏ (–ø–æ \n)
                    var lines = levelContents.components(separatedBy: "\n")
                    lines.shuffle()
                    
                    // –ü—Ä–æ—Ö–æ–¥–∏–º–æ –ø–æ –∫–æ–∂–Ω–æ–º—É —Ä—è–¥–∫—É + –æ—Ç—Ä–∏–º—É—î–º–æ –Ω–æ–º–µ—Ä
                    for (index, line) in lines.enumerated() {
                        let parts = line.components(separatedBy: ": ") // –º–∞—Å–∏–≤ parts ["HA|PP|Y", "Feeling good"]
                        
                        // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞, —á–∏ –º–∞—Å–∏–≤ parts –º—ñ—Å—Ç–∏—Ç—å –º—ñ–Ω—ñ–º—É–º 2 –µ–ª–µ–º–µ–Ω—Ç–∏
                        if parts.count == 2 {
                            let answer = parts[0] // answer ‚Äî —Ü–µ —á–∞—Å—Ç–∏–Ω–∞ –∑ –ª—ñ—Ç–µ—Ä–∞–º–∏, —Ç–∏–ø—É HA|PP|Y
                            let clue = parts[1] // clue ‚Äî —Ç–µ–∫—Å—Ç –ø—ñ–¥–∫–∞–∑–∫–∏, —Ç–∏–ø—É "Feeling good"
                            
                            // –î–æ–¥–∞—î–º–æ –ø—ñ–¥–∫–∞–∑–∫—É –¥–æ –∑–∞–≥–∞–ª—å–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç—É (1. Feeling good)
                            clueString += "\(index + 1). \(clue)\n"
                            
                            // –í–∏–¥–∞–ª—è—î–º–æ |, –æ—Ç—Ä–∏–º—É—î–º–æ —Å–ª–æ–≤–æ "HAPPY"
                            let solutionWord  = answer.replacingOccurrences(of: "|", with: "")
                            solutionsString += "\(solutionWord.count) letters\n"
                            solutions.append(solutionWord)
                            
                            // –†–æ–∑–±–∏–≤–∞—î–º–æ "HA|PP|Y" –Ω–∞ —à–º–∞—Ç–∫–∏ ["HA", "PP", "Y"]
                            let bits = answer.components(separatedBy: "|")
                            letterBits += bits
                        } else {
                            print("Warning: Invalid format for line: \(line)")
                        }
                    }
                }
            }
            
            DispatchQueue.main.async {
                // –î–æ–¥–∞–π –ª–æ–≥—É–≤–∞–Ω–Ω—è —Å—Ñ–æ—Ä–º–æ–≤–∞–Ω–æ–≥–æ —Å–ª–æ–≤–∞
                let fullWord = letterBits.joined() // –ó–±–∏—Ä–∞—î –≤—Å—ñ —á–∞—Å—Ç–∏–Ω–∏ –≤ –æ–¥–Ω–µ —Å–ª–æ–≤–æ
                print("Full Word: \(fullWord)") // –í–∏–≤–æ–¥–∏–º–æ —Å—Ñ–æ—Ä–º–æ–≤–∞–Ω–µ —Å–ª–æ–≤–æ
                
                // –ü–æ–∫–∞–∑—É—î–º–æ –≤—Å—ñ –ø—ñ–¥–∫–∞–∑–∫–∏ –≤ cluesLabel
                self.cluesLabel.text = clueString.trimmingCharacters(in: .whitespacesAndNewlines)
                // –ü–æ–∫–∞–∑—É—î–º–æ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –±—É–∫–≤ —É –∫–æ–∂–Ω–æ–º—É —Å–ª–æ–≤—ñ –≤ answearsLabel
                self.answersLabel.text = solutionsString.trimmingCharacters(in: .whitespacesAndNewlines)
                
                
                
                letterBits.shuffle()
                
                if self.letterButtons.count == letterBits.count {
                    for i in 0..<self.letterButtons.count {
                        self.letterButtons[i].setTitle(letterBits[i], for: .normal)
                    }
                }  else {
                    print("Error: The number of letter buttons doesn't match the number of letter bits.")
                }
            }
        }
    }
}
